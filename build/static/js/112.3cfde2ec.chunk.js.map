{"version":3,"sources":["views/app/settings/templates-translations.js","components/DataTradesTable/index.js","views/app/settings/trasnlations-modal.js","components/VideoUploader/index.js"],"names":["Column","Table","HeaderCell","Cell","CourseTranslations","getEmailTemplates","a","setState","spinning","_isMounted","ApiCall","Url","GET_TEMPLATES_TRANSLATIONS","props","match","params","id","config","get","response","status","languages","data","entityId","translations","handleInputChange","e","target","name","value","handleChangeContent","content","handleChangePage","dataKey","page","handleChangeLength","displayLength","getData","state","filter","v","i","start","handleSelectLanguage","selectedLanguage","handleChangeTranslationContent","translationContent","toggle","item","showModal","body","language_id","modalMethod","translationId","storeTranslation","validation","handleValidation","loadingApi","UPDATE_TEMPLATES_TRANSLATIONS","entity_id","post","NotificationManager","success","error","message","updateTranslation","languageValidation","contentValidation","loading","this","xxs","className","to","size","color","heading","onClick","activePage","total","length","onChangePage","onChangeLength","width","fixed","align","rowData","rowIndex","minWidth","flexGrow","storeEmailTemplates","handleChangeEmailTranslationContent","Component","Pagination","DataTradesTable","children","autoHeight","bordered","cellBordered","virtualized","hover","shouldUpdateScroll","lengthMenu","label","quillModules","toolbar","list","indent","quillFormats","TranslationsModal","handleGuidesInputChange","question","answer","title","paragraph","handleChangeParagraph","handleCategoryInputChange","categoryName","handleResultInputChange","subTitle","addResultList","handleChangeChatMessage","onHomeVideoComplete","onCourseVideoComplete","isOpen","row","sm","onChange","placeholder","map","key","theme","modules","formats","type","required","rows","uploadUrl","UPLOAD_HOME_VIDEO_TRANSLATION","isMulti","chunkSize","onUploadComplete","UPLOAD_COURSE_VIDEO_TRANSLATION","disabled","VideoUploader","args","uploadObj","asyncSettings","parseInt","itemData","onRemoveFile","postRawFile","onPausing","isInteraction","event","navigator","onLine","onResuming","onBeforeFailure","proxy","cancel","clearTimeInterval","setInterval","isNullOrUndefined","filesData","statusCode","resume","clearSetInterval","pause","clearInterval","ddlDatas","fields","text","saveUrl","autoUpload","minFileSize","maxFileSize","multiple","ref","scope","actionComplete","allowedExtensions","removing","pausing","resuming","chunkFailure"],"mappings":"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","file":"static/js/112.3cfde2ec.chunk.js","sourcesContent":["import React, {Component, Fragment} from \"react\";\r\nimport {Button, Card, CardBody, CardTitle, Col, Row,} from \"reactstrap\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport {Colxx, Separator} from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport ApiCall from '../../../config/network';\r\nimport Url from '../../../config/api';\r\nimport {NotificationManager} from \"../../../components/common/react-notifications\";\r\nimport {config} from \"../../../config/env\";\r\n// import { confirmAlert } from 'react-confirm-alert';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Table} from \"rsuite\";\r\nimport '../table.css';\r\nimport DataTradesTable from \"../../../components/DataTradesTable\";\r\nimport TranslationsModal from \"../settings/trasnlations-modal\";\r\nimport {confirmAlert} from \"react-confirm-alert\";\r\n\r\nconst { Column, HeaderCell, Cell,  } = Table;\r\n\r\nexport default class CourseTranslations extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            translationContent: '',\r\n            loading: false,\r\n            languages: [],\r\n            entityId: '',\r\n            translations: [],\r\n            spinning: true,\r\n            selectedLanguage: null,\r\n            translationId: null,\r\n            modalMethod: '',\r\n            loadingApi: false,\r\n            showModal: false,\r\n            //Pagination\r\n            displayLength: 10,\r\n            page: 1\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this._isMounted = false\r\n        this.getEmailTemplates();\r\n    };\r\n\r\n    getEmailTemplates = async ()=> {\r\n        this.setState({spinning: true});\r\n        if(!this._isMounted){\r\n            let response = await ApiCall.get(`${Url.GET_TEMPLATES_TRANSLATIONS}/${this.props.match.params.id}`, await config())\r\n            if(response.status=== 200){\r\n                this.setState({\r\n                    languages: response.data.languages,\r\n                    entityId: this.props.match.params.id,\r\n                    translations: response.data.translations,\r\n                    spinning: false\r\n                });\r\n            }\r\n        }\r\n\r\n    };\r\n    componentWillUnmount() {\r\n        this._isMounted = true\r\n    }\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    handleChangeContent = (content) => {\r\n        this.setState({content});\r\n    };\r\n    handleChangePage = (dataKey) => {\r\n        this.setState({\r\n            page: dataKey\r\n        });\r\n    };\r\n    handleChangeLength = (dataKey) => {\r\n        this.setState({\r\n            page: 1,\r\n            displayLength: dataKey\r\n        });\r\n    };\r\n    getData = () => {\r\n        const {displayLength, page, translations} = this.state;\r\n        return translations.filter((v, i) => {\r\n            const start = displayLength * (page - 1);\r\n            const end = start + displayLength;\r\n            return i >= start && i < end;\r\n        });\r\n    };\r\n    handleSelectLanguage = (e) => {\r\n        this.setState({\r\n            selectedLanguage: e.target.value\r\n        })\r\n    };\r\n    handleChangeTranslationContent = (translationContent) => {\r\n        this.setState({translationContent});\r\n    };\r\n    toggle = (item) => {\r\n        this.setState({\r\n            showModal: !this.state.showModal\r\n        })\r\n        if (item.id) {\r\n            this.setState({\r\n                translationContent: item.body[0].content,\r\n                selectedLanguage: item.language_id,\r\n                modalMethod: 'update',\r\n                translationId: item.id\r\n            })\r\n        }else {\r\n            this.setState({\r\n                translationContent: '',\r\n                selectedLanguage: '',\r\n                modalMethod: 'store'\r\n            })\r\n        }\r\n    };\r\n    storeTranslation = async () => {\r\n        const {selectedLanguage, translationContent, entityId} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.UPDATE_TEMPLATES_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  entityId,\r\n                content: translationContent\r\n            }, await config())\r\n            if(response.status === 200){\r\n\r\n                this.setState({\r\n                    showModal: false,\r\n                    loadingApi: false\r\n                })\r\n                this.getEmailTemplates();\r\n                return NotificationManager.success(\r\n                    \"Translation Stored Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    updateTranslation = async () => {\r\n        const {selectedLanguage, translationContent, entityId, translationId} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.UPDATE_TEMPLATES_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  entityId,\r\n                content: translationContent,\r\n                id: translationId\r\n            }, await config())\r\n            if(response.status === 200){\r\n\r\n                this.setState({\r\n                    showModal: false,\r\n                    loadingApi: false\r\n                })\r\n                this.getEmailTemplates();\r\n                return NotificationManager.success(\r\n                    \"Translation Updated Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    handleValidation = () => {\r\n        const {selectedLanguage, translationContent,} = this.state;\r\n        let languageValidation = {\r\n            message: 'Please Select Language',\r\n            status: false\r\n        };\r\n        let contentValidation = {\r\n            message: 'Please write translation content',\r\n            status: false\r\n        };\r\n        let passed = {\r\n            status: true\r\n        };\r\n        return selectedLanguage !== null?\r\n            selectedLanguage === \"\"? languageValidation :\r\n                selectedLanguage === \"Please Select Language\"? languageValidation :\r\n                    translationContent === \"\"? contentValidation :\r\n                        translationContent === \"<p><br></p>\"? contentValidation :\r\n                            passed\r\n            : languageValidation\r\n\r\n    };\r\n    render() {\r\n        const data = this.getData()\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n\r\n                        <div className=\"text-zero top-right-button-container\">\r\n                            <Link to='/app/settings/email-templates'><Button size='lg' color={'secondary'}>Go Back</Button></Link>\r\n                        </div>\r\n                        <Breadcrumb heading=\"faq.view\" match={this.props.match} />\r\n                        <Separator className=\"mb-5\" />\r\n                    </Colxx>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"h-100\">\r\n                            <CardBody>\r\n                                {/*<div className='d-flex justify-content-left align-items-center mb-5'>*/}\r\n                                {/*    Question:*/}\r\n                                {/*</div>*/}\r\n                                <CardTitle>\r\n                                    {this.state.entityId === \"1\"? \"Data Trades Register\":\r\n                                        this.state.entityId === \"2\"? \"IronFx Register\": \"VIP Member\"\r\n                                    }\r\n\r\n                                    Translations | <Button size='xs' color='primary'\r\n                                                           onClick={this.toggle}>Add</Button>\r\n                                </CardTitle>\r\n                                <DataTradesTable\r\n                                    activePage={this.state.activePage}\r\n                                    displayLength={this.state.displayLength}\r\n                                    total={this.state.translations.length}\r\n                                    onChangePage={this.handleChangePage}\r\n                                    onChangeLength={this.handleChangeLength}\r\n                                    data={data}\r\n                                    loading={this.state.spinning}\r\n                                >\r\n                                    <Column width={100} fixed align=\"center\">\r\n                                        <HeaderCell>No</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <span>{rowIndex + 1}</span>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                    <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                        <HeaderCell>Name</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <span>{rowData.language_id === 2 ? \"French\" : \"Dutch\"}</span>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                    <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                        <HeaderCell>Actions</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <div>\r\n                                                    {/*<Button color=\"danger\" size=\"xs\" className=\"mb-2\"*/}\r\n                                                    {/*        onClick={() => this.deleteTranslation(rowData.id)}*/}\r\n                                                    {/*>*/}\r\n                                                    {/*    <IntlMessages id=\"delete\"/>*/}\r\n                                                    {/*</Button>*/}\r\n                                                    <Button color=\"secondary\" size=\"xs\" className=\"mb-2\" onClick={()=>this.toggle(rowData)}>\r\n                                                        <IntlMessages id=\"edit\"/>\r\n                                                    </Button>\r\n                                                </div>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                </DataTradesTable>\r\n                                {this.state.showModal &&\r\n                                <TranslationsModal\r\n                                    showModal={this.state.showModal}\r\n                                    toggle={this.toggle}\r\n                                    languages={this.state.languages}\r\n                                    handleSelectLanguage={this.handleSelectLanguage}\r\n                                    selectedLanguage={this.state.selectedLanguage}\r\n                                    storeTranslation={this.storeTranslation}\r\n                                    updateTranslation={this.updateTranslation}\r\n                                    loadingApi={this.state.loadingApi}\r\n                                    storeEmailTemplates={this.storeTranslation}\r\n                                    translationContent={this.state.translationContent}\r\n                                    handleChangeEmailTranslationContent={this.handleChangeTranslationContent}\r\n                                    modalMethod={this.state.modalMethod}\r\n                                />\r\n                                }\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Fragment} from 'react';\r\nimport {Table} from \"rsuite\";\r\nimport '../../views/app/table.css';\r\n\r\nconst {Pagination} = Table;\r\nconst DataTradesTable = ({\r\n                             activePage,\r\n                             displayLength,\r\n                             total,\r\n                             onChangePage,\r\n                             onChangeLength,\r\n                             data,\r\n                             loading,\r\n                             children\r\n                         }) => {\r\n    return (\r\n        <Fragment>\r\n            <Table autoHeight={true}\r\n                   data={data}\r\n                   bordered\r\n                   cellBordered\r\n                   virtualized={false}\r\n                   hover={true}\r\n                   loading={loading}\r\n                   shouldUpdateScroll>\r\n                {children}\r\n            </Table>\r\n            {onChangePage && <Pagination\r\n                lengthMenu={[\r\n                    {\r\n                        value: 25,\r\n                        label: 25\r\n                    },\r\n                    {\r\n                        value: 35,\r\n                        label: 35\r\n                    }\r\n                ]}\r\n                activePage={activePage}\r\n                displayLength={displayLength}\r\n                total={total}\r\n                onChangePage={onChangePage}\r\n                onChangeLength={onChangeLength}\r\n            />}\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default DataTradesTable;\r\n","import React, {Fragment, useEffect} from \"react\";\r\nimport {Button, FormGroup, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {Colxx} from \"../../../components/common/CustomBootstrap\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport VideoUploader from \"../../../components/VideoUploader\";\r\nimport Url from \"../../../config/api\";\r\n\r\nconst quillModules = {\r\n    toolbar: [\r\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n        [\r\n            {list: \"ordered\"},\r\n            {list: \"bullet\"},\r\n            {indent: \"-1\"},\r\n            {indent: \"+1\"}\r\n        ],\r\n        [\"link\", \"image\"],\r\n        [\"clean\"]\r\n    ]\r\n};\r\nconst quillFormats = [\r\n    \"header\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"blockquote\",\r\n    \"list\",\r\n    \"bullet\",\r\n    \"indent\",\r\n    \"link\",\r\n    \"image\"\r\n];\r\nconst TranslationsModal = ({\r\n                               showModal, toggle, languages, handleSelectLanguage, selectedLanguage,\r\n                               handleChangeTranslationContent, translationContent, loadingApi,\r\n                               storeTranslation, updateTranslation, modalMethod, handleInputChange,\r\n                               handleGuidesInputChange, question, answer, title, paragraph,\r\n                               handleChangeParagraph, handleCategoryInputChange, categoryName,\r\n                               handleResultInputChange, heading, subTitle, total, addResultList,\r\n                               handleChangeChatMessage, message,\r\n                               onHomeVideoComplete,\r\n                               onCourseVideoComplete,\r\n                               entityId,\r\n                               storeEmailTemplates,\r\n                               handleChangeEmailTranslationContent\r\n                           }) => {\r\n    return (\r\n        <Modal isOpen={showModal} toggle={toggle} size='lg'>\r\n            <ModalHeader toggle={toggle}>\r\n                {modalMethod === 'store' ? \"Store Translation\" : 'Update Translation'}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                <div className=\"react-modal-custom-overflow p-2\">\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Language</label>\r\n                        <select\r\n                            name=\"select\"\r\n                            className=\"form-control\"\r\n                            value={selectedLanguage}\r\n                            onChange={handleSelectLanguage}\r\n                            placeholder='Please Select Language..'\r\n                        >\r\n                            <option value={null}>Please Select Language</option>\r\n                            {languages.map(item => (\r\n                                <option key={item.id} value={item.id}>{item.name}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                    </Colxx>\r\n                </FormGroup>\r\n                {handleChangeTranslationContent &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Content</label>\r\n                        <ReactQuill\r\n                            theme=\"snow\"\r\n                            value={translationContent}\r\n                            onChange={handleChangeTranslationContent}\r\n                            modules={quillModules}\r\n                            formats={quillFormats}/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {handleChangeEmailTranslationContent &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Content</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={translationContent}\r\n                                onChange={handleChangeEmailTranslationContent}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    }\r\n                {handleInputChange && <div>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Question</label>\r\n                            <Input type=\"text\" value={question} onChange={handleInputChange} name=\"question\"\r\n                                   placeholder={'Question *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Answer</label>\r\n                            <Input type=\"textarea\" rows='5' value={answer} onChange={handleInputChange} name=\"answer\"\r\n                                   placeholder={'Answer *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </div>}\r\n                {handleGuidesInputChange &&\r\n                <Fragment>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Title</label>\r\n                            <Input type=\"text\" value={title} onChange={handleGuidesInputChange} name=\"title\"\r\n                                   placeholder={'Title *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Paragraph</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={paragraph}\r\n                                onChange={handleChangeParagraph}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </Fragment>}\r\n                {handleCategoryInputChange &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Name</label>\r\n                            <Input type=\"text\"\r\n                                   value={categoryName}\r\n                                   onChange={handleCategoryInputChange}\r\n                                   name=\"categoryName\"\r\n                                   placeholder={'Name *'}\r\n                                   required\r\n                            />\r\n                        </Colxx>\r\n                    </FormGroup>}\r\n                    {handleResultInputChange &&\r\n                        <Fragment>\r\n\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Heading </label>\r\n                                        <Input type=\"text\"\r\n                                               value={heading}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"heading\"\r\n                                               placeholder={'Heading *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Subtitle </label>\r\n                                        <Input type=\"text\"\r\n                                               value={subTitle}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"subTitle\"\r\n                                               placeholder={'Subtitle *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                            <FormGroup row>\r\n                                <Colxx sm=\"12\">\r\n                                    <label> Total </label>\r\n                                    <Input type=\"text\"\r\n                                           value={total}\r\n                                           onChange={handleResultInputChange}\r\n                                           name=\"total\"\r\n                                           placeholder={'Total *'}\r\n                                           required\r\n                                    />\r\n                                </Colxx>\r\n                            </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Rows </label>\r\n                                        {addResultList()}\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                        </Fragment>\r\n                  }\r\n                {handleChangeChatMessage &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Message</label>\r\n                        <Input type=\"textarea\" rows='5' value={message} onChange={handleChangeChatMessage} name=\"message\"\r\n                               placeholder={'Message *'} required/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {(onHomeVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                        <div className='upload_wrapper mt-5'>\r\n                            <div className=\"lead\">\r\n                                Please Upload Home Video Translation\r\n                            </div>\r\n                            <hr/>\r\n                            {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 200MB</span>\r\n                            <hr/>\r\n                            <VideoUploader\r\n                                uploadUrl={`${Url.UPLOAD_HOME_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                                isMulti={false}\r\n                                chunkSize={200000000}\r\n                                onUploadComplete={onHomeVideoComplete}\r\n                            />\r\n\r\n                        </div>\r\n                    // </FormGroup>\r\n                    }\r\n                    {(onCourseVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                    <div className='upload_wrapper mt-5'>\r\n                        <div className=\"lead\">\r\n                            Please Upload Course Video Translation\r\n                        </div>\r\n                        <hr/>\r\n                        {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 30MB</span>\r\n                        <hr/>\r\n                        <VideoUploader\r\n                            uploadUrl={`${Url.UPLOAD_COURSE_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                            isMulti={false}\r\n                            chunkSize={200000000}\r\n                            onUploadComplete={onCourseVideoComplete}\r\n                        />\r\n\r\n                    </div>\r\n                        // </FormGroup>\r\n                    }\r\n                </div>\r\n            </ModalBody>\r\n            {!entityId &&\r\n            <ModalFooter>\r\n                {modalMethod === 'store' ?\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={storeTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Store\r\n                </span>\r\n                    </Button> :\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={updateTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Update\r\n                </span>\r\n                    </Button>}\r\n            </ModalFooter>\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n}\r\nexport default TranslationsModal;","import React, {Component} from \"react\";\r\nimport {UploaderComponent} from '@syncfusion/ej2-react-inputs';\r\n// import './index.css'\r\nimport {isNullOrUndefined} from '@syncfusion/ej2-base';\r\nexport default class VideoUploader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.value = 0;\r\n        this.ddlDatas = [\r\n            {value: 500000, size: '500 KB'},\r\n            {value: 1000000, size: '1 MB'},\r\n            {value: 2000000, size: '2 MB'}\r\n        ];\r\n        this.fields = {text: 'size', value: 'value'};\r\n        this.isInteraction = false;\r\n        this.asyncSettings = {\r\n            saveUrl: props.uploadUrl,\r\n            // removeUrl: 'https://ej2.syncfusion.com/services/api/uploadbox/Remove',\r\n            chunkSize: props.chunkSize? props.chunkSize : 20000000\r\n        };\r\n        this.autoUpload = false;\r\n    }\r\n\r\n    onChange = (args) => {\r\n        this.uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.value, 10);\r\n    }\r\n\r\n    onRemoveFile = (args) => {\r\n        args.postRawFile = false;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onPausing = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onResuming = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\r\n    onBeforeFailure = (args) => {\r\n        let proxy = this;\r\n        args.cancel = !this.isInteraction;\r\n        // interval to check network availability on every 500 milliseconds\r\n        let clearTimeInterval = setInterval(function () {\r\n            if (navigator.onLine && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 4) {\r\n                proxy.uploadObj.resume(proxy.uploadObj.filesData);\r\n                clearSetInterval();\r\n            } else {\r\n                if (!proxy.isInteraction && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 3) {\r\n                    proxy.uploadObj.pause(proxy.uploadObj.filesData);\r\n                }\r\n            }\r\n        }, 500);\r\n\r\n        // clear Interval after when network is available.\r\n      const clearSetInterval = () => {\r\n            clearInterval(clearTimeInterval);\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <UploaderComponent\r\n                minFileSize = {10000}\r\n                maxFileSize= {200000000}\r\n                id='file'\r\n                type='file'\r\n                multiple={this.props.isMulti}\r\n                ref={(scope) => {this.uploadObj = scope;}}\r\n                asyncSettings={this.asyncSettings}\r\n                actionComplete={this.props.onUploadComplete}\r\n                autoUpload={this.autoUpload}\r\n                allowedExtensions=\"video/*\"\r\n                removing={this.onRemoveFile}\r\n                pausing={this.onPausing}\r\n                // uploading={() => (alert(\"HI\"))}\r\n                // template={this.template}\r\n                resuming={this.onResuming}\r\n                chunkFailure={this.onBeforeFailure}\r\n            />\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}