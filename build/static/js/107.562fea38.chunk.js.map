{"version":3,"sources":["views/app/settings/terms.js","components/DataTradesTable/index.js","views/app/settings/trasnlations-modal.js","components/VideoUploader/index.js","../node_modules/reactstrap/es/Form.js"],"names":["Column","Table","HeaderCell","Cell","quillModules","toolbar","list","indent","quillFormats","initialState","content","loading","languages","entityId","translations","spinning","selectedLanguage","translationContent","translationId","modalMethod","loadingApi","showModal","displayLength","page","TermsAndConditions","props","getTermsAndConditions","a","setState","ApiCall","Url","GET_TERMS_AND_CONDITIONS","config","get","response","status","data","termCondition","terms","id","updatePrivacyPolicy","e","preventDefault","state","UPDATE_TERMS_AND_CONDITIONS","post","NotificationManager","success","handleInputChange","target","name","value","handleChangeContent","handleChangePage","dataKey","handleChangeLength","getData","filter","v","i","start","handleSelectLanguage","handleChangeTranslationContent","toggle","item","body","language","storeTranslation","validation","handleValidation","STORE_TERMS_AND_CONDITIONS_TRANSLATIONS","language_id","entity_id","error","message","updateTranslation","UPDATE_TERMS_AND_CONDITIONS_TRANSLATIONS","languageValidation","contentValidation","deleteTranslation","confirmAlert","title","buttons","label","onClick","confirmDeleteTranslation","DELETE_TRANSLATION","this","xxs","heading","match","className","onSubmit","row","sm","theme","onChange","modules","formats","color","style","marginTop","size","activePage","total","length","onChangePage","onChangeLength","width","fixed","align","rowData","rowIndex","minWidth","flexGrow","Component","Pagination","DataTradesTable","children","autoHeight","bordered","cellBordered","virtualized","hover","shouldUpdateScroll","lengthMenu","TranslationsModal","handleGuidesInputChange","question","answer","paragraph","handleChangeParagraph","handleCategoryInputChange","categoryName","handleResultInputChange","subTitle","addResultList","handleChangeChatMessage","onHomeVideoComplete","onCourseVideoComplete","handleChangeEmailTranslationContent","storeEmailTemplates","isOpen","placeholder","map","key","type","required","rows","uploadUrl","UPLOAD_HOME_VIDEO_TRANSLATION","isMulti","chunkSize","onUploadComplete","UPLOAD_COURSE_VIDEO_TRANSLATION","disabled","VideoUploader","args","uploadObj","asyncSettings","parseInt","itemData","onRemoveFile","postRawFile","onPausing","isInteraction","event","navigator","onLine","onResuming","onBeforeFailure","proxy","cancel","clearTimeInterval","setInterval","isNullOrUndefined","filesData","statusCode","resume","clearSetInterval","pause","clearInterval","ddlDatas","fields","text","saveUrl","autoUpload","minFileSize","maxFileSize","multiple","ref","scope","actionComplete","allowedExtensions","removing","pausing","resuming","chunkFailure","propTypes","PropTypes","node","inline","bool","tag","tagPropType","innerRef","oneOfType","object","func","string","cssModule","Form","_Component","_this","call","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","prototype","render","_this$props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/107.562fea38.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport {Row, Col, CardTitle} from \"reactstrap\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    // CardTitle,\r\n    FormGroup,\r\n    // Label,\r\n    Button,\r\n    Form,\r\n    // Input\r\n} from \"reactstrap\";\r\n\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport ApiCall from '../../../config/network';\r\nimport Url from '../../../config/api';\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport {config} from \"../../../config/env\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport DataTradesTable from \"../../../components/DataTradesTable\";\r\nimport TranslationsModal from \"./trasnlations-modal\";\r\nimport {Table} from \"rsuite\";\r\nimport {confirmAlert} from \"react-confirm-alert\";\r\nconst {Column, HeaderCell, Cell} = Table;\r\nconst quillModules = {\r\n    toolbar: [\r\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n        [\r\n            { list: \"ordered\" },\r\n            { list: \"bullet\" },\r\n            { indent: \"-1\" },\r\n            { indent: \"+1\" }\r\n        ],\r\n        [\"link\", \"image\"],\r\n        [\"clean\"]\r\n    ]\r\n};\r\nconst quillFormats = [\r\n    \"header\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"blockquote\",\r\n    \"list\",\r\n    \"bullet\",\r\n    \"indent\",\r\n    \"link\",\r\n    \"image\"\r\n];\r\nconst initialState = {\r\n    content: '',\r\n    loading: false,\r\n    languages: [],\r\n    entityId: '',\r\n    translations: [],\r\n    spinning: true,\r\n    selectedLanguage: '',\r\n    translationContent: '',\r\n    translationId: null,\r\n    modalMethod: '',\r\n    loadingApi: false,\r\n    showModal: false,\r\n    //Pagination\r\n    displayLength: 10,\r\n    page: 1,\r\n\r\n}\r\nexport default class TermsAndConditions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = initialState;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getTermsAndConditions();\r\n    }\r\n\r\n    getTermsAndConditions = async () => {\r\n        this.setState({\r\n            spinning: true,\r\n        })\r\n        let response = await ApiCall.get(Url.GET_TERMS_AND_CONDITIONS, await config());\r\n        if(response.status === 200){\r\n            this.setState({\r\n                content: response.data.termCondition.terms,\r\n                entityId: response.data.termCondition.id,\r\n                languages: response.data.languages,\r\n                translations: response.data.termCondition.translations,\r\n                spinning: false\r\n            })\r\n        }\r\n    }\r\n\r\n    updatePrivacyPolicy = async (e)=> {\r\n        e.preventDefault();\r\n        this.setState({loading: true});\r\n        const {content} = this.state;\r\n        let response = await ApiCall.post(Url.UPDATE_TERMS_AND_CONDITIONS, {\r\n            terms: content,\r\n        }, await config());\r\n        if(response.status === 200){\r\n            this.getTermsAndConditions();\r\n            this.setState({loading: false});\r\n            return  NotificationManager.success(\r\n                \"Terms & Conditions Updated Successfully\",\r\n                \"Success\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }else {\r\n            this.setState({loading: false});\r\n        }\r\n        // console.log(response)\r\n\r\n    };\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    handleChangeContent = (content) => {\r\n        this.setState({ content });\r\n    }\r\n    handleChangePage = (dataKey) => {\r\n        this.setState({\r\n            page: dataKey\r\n        });\r\n    };\r\n    handleChangeLength = (dataKey) => {\r\n        this.setState({\r\n            page: 1,\r\n            displayLength: dataKey\r\n        });\r\n    };\r\n    getData = () => {\r\n        const {displayLength, page, translations} = this.state;\r\n        return translations.filter((v, i) => {\r\n            const start = displayLength * (page - 1);\r\n            const end = start + displayLength;\r\n            return i >= start && i < end;\r\n        });\r\n    };\r\n    handleSelectLanguage = (e) => {\r\n        this.setState({\r\n            selectedLanguage: e.target.value\r\n        })\r\n    };\r\n    handleChangeTranslationContent = (translationContent) => {\r\n        this.setState({translationContent});\r\n    };\r\n    toggle = (item) => {\r\n        this.setState({\r\n            showModal: !this.state.showModal\r\n        })\r\n        if (item.id) {\r\n            this.setState({\r\n                translationContent: item.body[0].terms,\r\n                selectedLanguage: item.language.id,\r\n                modalMethod: 'update',\r\n                translationId: item.id\r\n            })\r\n        }else {\r\n            this.setState({\r\n                translationContent: '',\r\n                selectedLanguage: '',\r\n                modalMethod: 'store'\r\n            })\r\n        }\r\n    };\r\n    storeTranslation = async () => {\r\n        const {selectedLanguage, translationContent, entityId} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.STORE_TERMS_AND_CONDITIONS_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  entityId,\r\n                terms: translationContent\r\n            }, await config())\r\n            if(response.status === 200){\r\n                this.setState({\r\n                    showModal: false,\r\n                    loadingApi: false\r\n                })\r\n                this.getTermsAndConditions();\r\n                return NotificationManager.success(\r\n                    \"Translation Stored Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    updateTranslation = async () => {\r\n        const {selectedLanguage, translationContent, entityId, translationId} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.UPDATE_TERMS_AND_CONDITIONS_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  entityId,\r\n                terms: translationContent,\r\n                id: translationId\r\n            }, await config())\r\n            if(response.status === 200){\r\n\r\n                this.setState({\r\n                    showModal: false,\r\n                    loadingApi: false\r\n                })\r\n                this.getTermsAndConditions();\r\n                return NotificationManager.success(\r\n                    \"Translation Updated Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    handleValidation = () => {\r\n        const {selectedLanguage, translationContent,} = this.state;\r\n        let languageValidation = {\r\n            message: 'Please Select Language',\r\n            status: false\r\n        };\r\n        let contentValidation = {\r\n            message: 'Please write translation content',\r\n            status: false\r\n        };\r\n        let passed = {\r\n            status: true\r\n        };\r\n        return selectedLanguage !== null?\r\n            selectedLanguage === \"\"? languageValidation :\r\n                selectedLanguage === \"Please Select Language\"? languageValidation :\r\n                    translationContent === \"\"? contentValidation :\r\n                        translationContent === \"<p><br></p>\"? contentValidation :\r\n                            passed\r\n            : languageValidation\r\n\r\n    };\r\n    deleteTranslation  =  (item) => {\r\n        confirmAlert({\r\n            title: 'Confirmation!',\r\n            message: 'Are you sure you want to Delete This Translation?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: () => this.confirmDeleteTranslation(item)\r\n                },\r\n                {\r\n                    label: \"No\",\r\n                }\r\n            ]\r\n        })\r\n    };\r\n    confirmDeleteTranslation = async (id) => {\r\n        let response = await ApiCall.post(Url.DELETE_TRANSLATION, {\r\n            id: id,\r\n        }, await config());\r\n        if(response.status === 200){\r\n            this.getTermsAndConditions();\r\n            return  NotificationManager.success(\r\n                \"Translation deleted Successfully\",\r\n                \"Success\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    render() {\r\n        const { content} = this.state;\r\n        const data = this.getData()\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n                        <Breadcrumb heading=\"menu.terms\" match={this.props.match} />\r\n                        <Separator className=\"mb-5\" />\r\n                    </Colxx>\r\n                </Row>\r\n                <Row>\r\n                    <Col xxs=\"10\">\r\n                        <div className='col-sm-12 col-lg-12 col-xs-12 '>\r\n                        <Card>\r\n                            <div className=\"position-absolute card-top-buttons\">\r\n                            </div>\r\n                            <CardBody>\r\n                                {/*<CardTitle>*/}\r\n                                {/*    <IntlMessages id=\"good-student.create-good\" />*/}\r\n                                {/*</CardTitle>*/}\r\n                                <Form className=\"dashboard-quick-post\" onSubmit={this.updatePrivacyPolicy}>\r\n                                    <FormGroup row>\r\n                                        {/*<Label sm=\"3\">*/}\r\n                                        {/*    <IntlMessages id=\"good-student.content\" />*/}\r\n                                        {/*</Label>*/}\r\n                                        <Colxx sm=\"12\">\r\n                                            <ReactQuill\r\n                                                theme=\"snow\"\r\n                                                value={content}\r\n                                                onChange={this.handleChangeContent}\r\n                                                modules={quillModules}\r\n                                                formats={quillFormats}/>\r\n                                        </Colxx>\r\n                                    </FormGroup>\r\n                                    <Button className={`float-right btn-shadow btn-multiple-state ${this.state.loading ? \"show-spinner\" : \"\"}`} color=\"primary\">\r\n                                        <span className=\"spinner d-inline-block\">\r\n                          <span className=\"bounce1\" />\r\n                          <span className=\"bounce2\" />\r\n                          <span className=\"bounce3\" />\r\n                        </span>\r\n                                        <span className=\"label\"><IntlMessages id=\"save\" /></span>\r\n                                    </Button>\r\n                                </Form>\r\n                                <div style={{marginTop: '100px'}}>\r\n                                    <CardTitle>\r\n                                        {/*<IntlMessages id=\"good-student.create-good\" />*/}\r\n                                        Translations | <Button size='xs' color='primary'\r\n                                                               onClick={this.toggle}>Add</Button>\r\n                                    </CardTitle>\r\n                                    <DataTradesTable\r\n                                        activePage={this.state.activePage}\r\n                                        displayLength={this.state.displayLength}\r\n                                        total={this.state.translations.length}\r\n                                        onChangePage={this.handleChangePage}\r\n                                        onChangeLength={this.handleChangeLength}\r\n                                        data={data}\r\n                                        loading={this.state.spinning}\r\n                                    >\r\n                                        <Column width={100} fixed align=\"center\">\r\n                                            <HeaderCell>No</HeaderCell>\r\n                                            <Cell>\r\n                                                {(rowData, rowIndex) => {\r\n                                                    return <span>{rowIndex + 1}</span>\r\n                                                }}\r\n                                            </Cell>\r\n                                        </Column>\r\n                                        <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                            <HeaderCell>Name</HeaderCell>\r\n                                            <Cell>\r\n                                                {(rowData, rowIndex) => {\r\n                                                    return <span>{rowData.language.name}</span>\r\n                                                }}\r\n                                            </Cell>\r\n                                        </Column>\r\n                                        <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                            <HeaderCell>Actions</HeaderCell>\r\n                                            <Cell>\r\n                                                {(rowData, rowIndex) => {\r\n                                                    return <div>\r\n                                                        <Button color=\"secondary\" size=\"xs\" className=\"mb-2\" onClick={()=>this.toggle(rowData)}>\r\n                                                            <IntlMessages id=\"edit\"/>\r\n                                                        </Button>\r\n                                                        {\" \"}{\" \"}\r\n                                                        <Button color=\"danger\" size=\"xs\" className=\"mb-2\"\r\n                                                            onClick={() => this.deleteTranslation(rowData.id)}\r\n                                                        >\r\n                                                            <IntlMessages id=\"delete\"/>\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                }}\r\n                                            </Cell>\r\n                                        </Column>\r\n                                    </DataTradesTable>\r\n                                    {this.state.showModal &&\r\n                                    <TranslationsModal\r\n                                        showModal={this.state.showModal}\r\n                                        toggle={this.toggle}\r\n                                        languages={this.state.languages}\r\n                                        handleSelectLanguage={this.handleSelectLanguage}\r\n                                        selectedLanguage={this.state.selectedLanguage}\r\n                                        quillModules={quillModules}\r\n                                        handleChangeTranslationContent={this.handleChangeTranslationContent}\r\n                                        translationContent={this.state.translationContent}\r\n                                        quillFormats={quillFormats}\r\n                                        storeTranslation={this.storeTranslation}\r\n                                        updateTranslation={this.updateTranslation}\r\n                                        loadingApi={this.state.loadingApi}\r\n                                        modalMethod={this.state.modalMethod}\r\n                                    />\r\n                                    }\r\n\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                        </div>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Fragment} from 'react';\r\nimport {Table} from \"rsuite\";\r\nimport '../../views/app/table.css';\r\n\r\nconst {Pagination} = Table;\r\nconst DataTradesTable = ({\r\n                             activePage,\r\n                             displayLength,\r\n                             total,\r\n                             onChangePage,\r\n                             onChangeLength,\r\n                             data,\r\n                             loading,\r\n                             children\r\n                         }) => {\r\n    return (\r\n        <Fragment>\r\n            <Table autoHeight={true}\r\n                   data={data}\r\n                   bordered\r\n                   cellBordered\r\n                   virtualized={false}\r\n                   hover={true}\r\n                   loading={loading}\r\n                   shouldUpdateScroll>\r\n                {children}\r\n            </Table>\r\n            {onChangePage && <Pagination\r\n                lengthMenu={[\r\n                    {\r\n                        value: 25,\r\n                        label: 25\r\n                    },\r\n                    {\r\n                        value: 35,\r\n                        label: 35\r\n                    }\r\n                ]}\r\n                activePage={activePage}\r\n                displayLength={displayLength}\r\n                total={total}\r\n                onChangePage={onChangePage}\r\n                onChangeLength={onChangeLength}\r\n            />}\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default DataTradesTable;\r\n","import React, {Fragment, useEffect} from \"react\";\r\nimport {Button, FormGroup, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {Colxx} from \"../../../components/common/CustomBootstrap\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport VideoUploader from \"../../../components/VideoUploader\";\r\nimport Url from \"../../../config/api\";\r\n\r\nconst quillModules = {\r\n    toolbar: [\r\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n        [\r\n            {list: \"ordered\"},\r\n            {list: \"bullet\"},\r\n            {indent: \"-1\"},\r\n            {indent: \"+1\"}\r\n        ],\r\n        [\"link\", \"image\"],\r\n        [\"clean\"]\r\n    ]\r\n};\r\nconst quillFormats = [\r\n    \"header\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"blockquote\",\r\n    \"list\",\r\n    \"bullet\",\r\n    \"indent\",\r\n    \"link\",\r\n    \"image\"\r\n];\r\nconst TranslationsModal = ({\r\n                               showModal, toggle, languages, handleSelectLanguage, selectedLanguage,\r\n                               handleChangeTranslationContent, translationContent, loadingApi,\r\n                               storeTranslation, updateTranslation, modalMethod, handleInputChange,\r\n                               handleGuidesInputChange, question, answer, title, paragraph,\r\n                               handleChangeParagraph, handleCategoryInputChange, categoryName,\r\n                               handleResultInputChange, heading, subTitle, total, addResultList,\r\n                               handleChangeChatMessage, message,\r\n                               onHomeVideoComplete,\r\n                               onCourseVideoComplete,\r\n                               entityId,\r\n                               storeEmailTemplates,\r\n                               handleChangeEmailTranslationContent\r\n                           }) => {\r\n    return (\r\n        <Modal isOpen={showModal} toggle={toggle} size='lg'>\r\n            <ModalHeader toggle={toggle}>\r\n                {modalMethod === 'store' ? \"Store Translation\" : 'Update Translation'}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                <div className=\"react-modal-custom-overflow p-2\">\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Language</label>\r\n                        <select\r\n                            name=\"select\"\r\n                            className=\"form-control\"\r\n                            value={selectedLanguage}\r\n                            onChange={handleSelectLanguage}\r\n                            placeholder='Please Select Language..'\r\n                        >\r\n                            <option value={null}>Please Select Language</option>\r\n                            {languages.map(item => (\r\n                                <option key={item.id} value={item.id}>{item.name}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                    </Colxx>\r\n                </FormGroup>\r\n                {handleChangeTranslationContent &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Content</label>\r\n                        <ReactQuill\r\n                            theme=\"snow\"\r\n                            value={translationContent}\r\n                            onChange={handleChangeTranslationContent}\r\n                            modules={quillModules}\r\n                            formats={quillFormats}/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {handleChangeEmailTranslationContent &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Content</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={translationContent}\r\n                                onChange={handleChangeEmailTranslationContent}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    }\r\n                {handleInputChange && <div>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Question</label>\r\n                            <Input type=\"text\" value={question} onChange={handleInputChange} name=\"question\"\r\n                                   placeholder={'Question *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Answer</label>\r\n                            <Input type=\"textarea\" rows='5' value={answer} onChange={handleInputChange} name=\"answer\"\r\n                                   placeholder={'Answer *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </div>}\r\n                {handleGuidesInputChange &&\r\n                <Fragment>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Title</label>\r\n                            <Input type=\"text\" value={title} onChange={handleGuidesInputChange} name=\"title\"\r\n                                   placeholder={'Title *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Paragraph</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={paragraph}\r\n                                onChange={handleChangeParagraph}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </Fragment>}\r\n                {handleCategoryInputChange &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Name</label>\r\n                            <Input type=\"text\"\r\n                                   value={categoryName}\r\n                                   onChange={handleCategoryInputChange}\r\n                                   name=\"categoryName\"\r\n                                   placeholder={'Name *'}\r\n                                   required\r\n                            />\r\n                        </Colxx>\r\n                    </FormGroup>}\r\n                    {handleResultInputChange &&\r\n                        <Fragment>\r\n\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Heading </label>\r\n                                        <Input type=\"text\"\r\n                                               value={heading}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"heading\"\r\n                                               placeholder={'Heading *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Subtitle </label>\r\n                                        <Input type=\"text\"\r\n                                               value={subTitle}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"subTitle\"\r\n                                               placeholder={'Subtitle *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                            <FormGroup row>\r\n                                <Colxx sm=\"12\">\r\n                                    <label> Total </label>\r\n                                    <Input type=\"text\"\r\n                                           value={total}\r\n                                           onChange={handleResultInputChange}\r\n                                           name=\"total\"\r\n                                           placeholder={'Total *'}\r\n                                           required\r\n                                    />\r\n                                </Colxx>\r\n                            </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Rows </label>\r\n                                        {addResultList()}\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                        </Fragment>\r\n                  }\r\n                {handleChangeChatMessage &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Message</label>\r\n                        <Input type=\"textarea\" rows='5' value={message} onChange={handleChangeChatMessage} name=\"message\"\r\n                               placeholder={'Message *'} required/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {(onHomeVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                        <div className='upload_wrapper mt-5'>\r\n                            <div className=\"lead\">\r\n                                Please Upload Home Video Translation\r\n                            </div>\r\n                            <hr/>\r\n                            {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 200MB</span>\r\n                            <hr/>\r\n                            <VideoUploader\r\n                                uploadUrl={`${Url.UPLOAD_HOME_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                                isMulti={false}\r\n                                chunkSize={200000000}\r\n                                onUploadComplete={onHomeVideoComplete}\r\n                            />\r\n\r\n                        </div>\r\n                    // </FormGroup>\r\n                    }\r\n                    {(onCourseVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                    <div className='upload_wrapper mt-5'>\r\n                        <div className=\"lead\">\r\n                            Please Upload Course Video Translation\r\n                        </div>\r\n                        <hr/>\r\n                        {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 30MB</span>\r\n                        <hr/>\r\n                        <VideoUploader\r\n                            uploadUrl={`${Url.UPLOAD_COURSE_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                            isMulti={false}\r\n                            chunkSize={200000000}\r\n                            onUploadComplete={onCourseVideoComplete}\r\n                        />\r\n\r\n                    </div>\r\n                        // </FormGroup>\r\n                    }\r\n                </div>\r\n            </ModalBody>\r\n            {!entityId &&\r\n            <ModalFooter>\r\n                {modalMethod === 'store' ?\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={storeTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Store\r\n                </span>\r\n                    </Button> :\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={updateTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Update\r\n                </span>\r\n                    </Button>}\r\n            </ModalFooter>\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n}\r\nexport default TranslationsModal;","import React, {Component} from \"react\";\r\nimport {UploaderComponent} from '@syncfusion/ej2-react-inputs';\r\n// import './index.css'\r\nimport {isNullOrUndefined} from '@syncfusion/ej2-base';\r\nexport default class VideoUploader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.value = 0;\r\n        this.ddlDatas = [\r\n            {value: 500000, size: '500 KB'},\r\n            {value: 1000000, size: '1 MB'},\r\n            {value: 2000000, size: '2 MB'}\r\n        ];\r\n        this.fields = {text: 'size', value: 'value'};\r\n        this.isInteraction = false;\r\n        this.asyncSettings = {\r\n            saveUrl: props.uploadUrl,\r\n            // removeUrl: 'https://ej2.syncfusion.com/services/api/uploadbox/Remove',\r\n            chunkSize: props.chunkSize? props.chunkSize : 20000000\r\n        };\r\n        this.autoUpload = false;\r\n    }\r\n\r\n    onChange = (args) => {\r\n        this.uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.value, 10);\r\n    }\r\n\r\n    onRemoveFile = (args) => {\r\n        args.postRawFile = false;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onPausing = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onResuming = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\r\n    onBeforeFailure = (args) => {\r\n        let proxy = this;\r\n        args.cancel = !this.isInteraction;\r\n        // interval to check network availability on every 500 milliseconds\r\n        let clearTimeInterval = setInterval(function () {\r\n            if (navigator.onLine && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 4) {\r\n                proxy.uploadObj.resume(proxy.uploadObj.filesData);\r\n                clearSetInterval();\r\n            } else {\r\n                if (!proxy.isInteraction && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 3) {\r\n                    proxy.uploadObj.pause(proxy.uploadObj.filesData);\r\n                }\r\n            }\r\n        }, 500);\r\n\r\n        // clear Interval after when network is available.\r\n      const clearSetInterval = () => {\r\n            clearInterval(clearTimeInterval);\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <UploaderComponent\r\n                minFileSize = {10000}\r\n                maxFileSize= {200000000}\r\n                id='file'\r\n                type='file'\r\n                multiple={this.props.isMulti}\r\n                ref={(scope) => {this.uploadObj = scope;}}\r\n                asyncSettings={this.asyncSettings}\r\n                actionComplete={this.props.onUploadComplete}\r\n                autoUpload={this.autoUpload}\r\n                allowedExtensions=\"video/*\"\r\n                removing={this.onRemoveFile}\r\n                pausing={this.onPausing}\r\n                // uploading={() => (alert(\"HI\"))}\r\n                // template={this.template}\r\n                resuming={this.onResuming}\r\n                chunkFailure={this.onBeforeFailure}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;"],"sourceRoot":""}