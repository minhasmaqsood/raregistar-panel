{"version":3,"sources":["containers/navs/Breadcrumb.js","components/wizard/BottomNavigation.js","components/wizard/TopNavigation.js","containers/wizard/Basic.js","containers/wizard/LastStepEnd.js","containers/wizard/TopNavDisabled.js","containers/wizard/Validation.js","containers/wizard/Layouts.js","views/app/ui/forms/wizard.js"],"names":["getMenuTitle","sub","id","getUrl","path","index","split","BreadcrumbItems","match","substr","paths","length","indexOf","filter","x","className","map","key","active","to","BreadcrumbContainer","heading","BottomNavigation","render","next","previous","step","steps","props","Button","color","onClick","onClickPrev","prevLabel","onClickNext","nextLabel","Component","TopNavigation","getClassName","bind","itemClick","stepItem","isDone","push","this","disableNav","topNavClick","go","hideTopNav","name","desc","Basic","state","email","password","goToNext","goToPrev","messages","intl","Card","CardBody","Form","FormGroup","Label","IntlMessages","Input","type","placeholder","value","onChange","e","setState","target","injectIntl","LastStepEnd","bottomNavHidden","topNavDisabled","TopNavDisabled","Validation","validateEmail","validateName","validatePassword","form0","React","createRef","form1","form2","loading","fields","valid","form","error","test","setTimeout","formIndex","current","submitForm","then","values","errors","hideNavigation","asyncLoading","ref","initialValues","onSubmit","touched","validate","Spinner","Layouts","Row","xxs","xl","FormWizard","Breadcrumb"],"mappings":"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","file":"static/js/forms-wizard.89ed120f.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React, { Component } from \"react\";\r\nimport { WithWizard } from 'react-albus';\r\nimport { Button } from \"reactstrap\";\r\n\r\nexport class BottomNavigation extends Component {\r\n    render() {\r\n        return (\r\n            <WithWizard render={({ next, previous, step, steps }) => (\r\n                <div className={\"wizard-buttons \" + this.props.className}>\r\n                    <Button color=\"primary\"\r\n                        className={\"mr-1 \" + (steps.indexOf(step) <= 0 ? \"disabled\" : \"\")}\r\n                        onClick={() => { this.props.onClickPrev(previous, steps, step) }}>\r\n                        {this.props.prevLabel}\r\n                    </Button>\r\n\r\n                    <Button color=\"primary\"\r\n                        className={(steps.indexOf(step) >= steps.length - 1 ? \"disabled\" : \"\")}\r\n                        onClick={() => { this.props.onClickNext(next, steps, step) }}>\r\n                        {this.props.nextLabel}\r\n                    </Button>\r\n                </div>\r\n            )} />\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { WithWizard } from 'react-albus';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport class TopNavigation extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.getClassName = this.getClassName.bind(this);\r\n      this.itemClick = this.itemClick.bind(this);\r\n    }\r\n  \r\n    getClassName(steps, step, index, stepItem) {\r\n      if (steps.indexOf(step) === index) {\r\n        return \"step-doing\";\r\n      } else if (steps.indexOf(step) > index || stepItem.isDone) {\r\n        stepItem.isDone = true;\r\n        return \"step-done\";\r\n      }\r\n    }\r\n  \r\n    itemClick(stepItem, push) {\r\n      if(this.props.disableNav) {\r\n        return;\r\n      }\r\n      this.props.topNavClick(stepItem, push)\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <WithWizard render={({ next, previous, step, steps, go, push }) => (\r\n          <ul className={\"nav nav-tabs \" + this.props.className + (this.props.disableNav ? \" disabled\" : \"\")}>\r\n            {\r\n              steps.map((stepItem, index) => {\r\n                if (!stepItem.hideTopNav) {\r\n                  return (\r\n                    <li key={index} className={\"nav-item \" + this.getClassName(steps, step, index, stepItem)}>\r\n                      <NavLink to=\"#\" className=\"nav-link\" onClick={()=> this.itemClick(stepItem, push)}>\r\n                        <span>{stepItem.name}</span>\r\n                        <small>{stepItem.desc}</small>\r\n                      </NavLink>\r\n                    </li>\r\n                  )\r\n                } else {\r\n                  return <Fragment key={index} />\r\n                }\r\n              })\r\n            }\r\n          </ul>\r\n        )} />\r\n      )\r\n    }\r\n  }","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\n\r\nclass Basic extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onClickPrev = this.onClickPrev.bind(this);\r\n    this.topNavClick = this.topNavClick.bind(this);\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    }\r\n  }\r\n\r\n  topNavClick(stepItem, push) {\r\n    push(stepItem.id);\r\n  }\r\n\r\n  onClickNext(goToNext, steps, step) {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  }\r\n\r\n  onClickPrev(goToPrev, steps, step) {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    return (\r\n      <Card>\r\n        <CardBody className=\"wizard wizard-default\">\r\n          <Wizard>\r\n            <TopNavigation className=\"justify-content-center\" disableNav={false} topNavClick={this.topNavClick} />\r\n            <Steps>\r\n              <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.name\" />\r\n                      </Label>\r\n                      <Input type=\"text\" name=\"name\" placeholder={messages[\"forms.name\"]} value={this.state.name} onChange={(e)=> {this.setState({name: e.target.value})}}/>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n              </Step>\r\n              <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.email\" />\r\n                      </Label>\r\n                      <Input type=\"email\" name=\"email\" placeholder={messages[\"forms.email\"]} value={this.state.email} onChange={(e)=> {this.setState({email: e.target.value})}}/>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n\r\n              </Step>\r\n              <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.password\" />\r\n                      </Label>\r\n                      <Input type=\"password\" name=\"password\" placeholder={messages[\"forms.password\"]} value={this.state.password} onChange={(e)=> {this.setState({password: e.target.value})}}/>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n              </Step>\r\n              <Step id=\"step4\" hideTopNav={true}>\r\n                <div className=\"wizard-basic-step text-center\">\r\n                  <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                  <p><IntlMessages id=\"wizard.registered\" /></p>\r\n                </div>\r\n              </Step>\r\n            </Steps>\r\n            <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-center\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n          </Wizard>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(Basic)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\n\r\nclass LastStepEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClickNext = this.onClickNext.bind(this);\r\n        this.onClickPrev = this.onClickPrev.bind(this);\r\n        this.topNavClick = this.topNavClick.bind(this);\r\n        this.state = {\r\n            bottomNavHidden: false,\r\n            topNavDisabled: false,\r\n\r\n            name: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n        }\r\n    }\r\n\r\n    topNavClick(stepItem, push) {\r\n        if (this.state.topNavDisabled) {\r\n            return;\r\n        }\r\n        push(stepItem.id);\r\n    }\r\n\r\n    onClickNext(goToNext, steps, step) {\r\n        step.isDone = true;\r\n        if (steps.length - 2 <= steps.indexOf(step)) {\r\n            this.setState({ bottomNavHidden: true, topNavDisabled: true });\r\n        }\r\n        if (steps.length - 1 <= steps.indexOf(step)) {\r\n            return;\r\n        }\r\n        goToNext();\r\n    }\r\n\r\n    onClickPrev(goToPrev, steps, step) {\r\n        if (steps.indexOf(step) <= 0) {\r\n            return;\r\n        }\r\n        goToPrev();\r\n    }\r\n\r\n    render() {\r\n        const { messages } = this.props.intl;\r\n        return (\r\n            <Card>\r\n                <CardBody className=\"wizard wizard-default\">\r\n                    <Wizard>\r\n                        <TopNavigation className=\"justify-content-center\" disableNav={false} topNavClick={this.topNavClick} />\r\n                        <Steps>\r\n                            <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                <IntlMessages id=\"forms.name\" />\r\n                                            </Label>\r\n                                            <Input type=\"text\" name=\"name\" placeholder={messages[\"forms.name\"]} value={this.state.name} onChange={(e) => { this.setState({ name: e.target.value }) }} />\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                <IntlMessages id=\"forms.email\" />\r\n                                            </Label>\r\n                                            <Input type=\"email\" name=\"email\" placeholder={messages[\"forms.email\"]} value={this.state.email} onChange={(e) => { this.setState({ email: e.target.value }) }} />\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </div>\r\n\r\n                            </Step>\r\n                            <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                <IntlMessages id=\"forms.password\" />\r\n                                            </Label>\r\n                                            <Input type=\"password\" name=\"password\" placeholder={messages[\"forms.password\"]} value={this.state.password} onChange={(e) => { this.setState({ password: e.target.value }) }} />\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </div>\r\n\r\n                            </Step>\r\n                            <Step id=\"step4\" hideTopNav={true}>\r\n                                <div className=\"wizard-basic-step text-center\">\r\n                                    <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                                    <p><IntlMessages id=\"wizard.registered\" /></p>\r\n                                </div>\r\n                            </Step>\r\n                        </Steps>\r\n                        <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className={\"justify-content-center \" + (this.state.bottomNavHidden && \"invisible\")} prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n                    </Wizard>\r\n                </CardBody>\r\n            </Card>\r\n\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(LastStepEnd)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\n\r\nclass TopNavDisabled extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onClickPrev = this.onClickPrev.bind(this);\r\n    this.topNavClick = this.topNavClick.bind(this);\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    }\r\n  }\r\n\r\n  topNavClick(stepItem, push) {\r\n    push(stepItem.id);\r\n  }\r\n\r\n  onClickNext(goToNext, steps, step) {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  }\r\n\r\n  onClickPrev(goToPrev, steps, step) {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    return (\r\n      <Card>\r\n        <CardBody className=\"wizard wizard-default\">\r\n          <Wizard>\r\n            <TopNavigation className=\"justify-content-center\" disableNav={true} topNavClick={this.topNavClick} />\r\n            <Steps>\r\n              <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.name\" />\r\n                      </Label>\r\n                      <Input type=\"text\" name=\"name\" placeholder={messages[\"forms.name\"]} value={this.state.name} onChange={(e) => { this.setState({ name: e.target.value }) }} />\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n              </Step>\r\n              <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.email\" />\r\n                      </Label>\r\n                      <Input type=\"email\" name=\"email\" placeholder={messages[\"forms.email\"]} value={this.state.email} onChange={(e) => { this.setState({ email: e.target.value }) }} />\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n\r\n              </Step>\r\n              <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.password\" />\r\n                      </Label>\r\n                      <Input type=\"password\" name=\"password\" placeholder={messages[\"forms.password\"]} value={this.state.password} onChange={(e) => { this.setState({ password: e.target.value }) }} />\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n\r\n              </Step>\r\n              <Step id=\"step4\" hideTopNav={true}>\r\n                <div className=\"wizard-basic-step text-center\">\r\n                  <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                  <p><IntlMessages id=\"wizard.registered\" /></p>\r\n              </div>\r\n              </Step>\r\n            </Steps>\r\n            <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-center\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]}/>\r\n          </Wizard>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(TopNavDisabled)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, FormGroup, Label, Spinner } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\nimport { Formik, Form, Field } from \"formik\";\r\n\r\n\r\nclass Validation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClickNext = this.onClickNext.bind(this);\r\n        this.onClickPrev = this.onClickPrev.bind(this);\r\n        this.validateEmail = this.validateEmail.bind(this);\r\n        this.validateName = this.validateName.bind(this);\r\n        this.validatePassword = this.validatePassword.bind(this);\r\n\r\n        this.form0 = React.createRef();\r\n        this.form1 = React.createRef();\r\n        this.form2 = React.createRef();\r\n\r\n        this.state = {\r\n            bottomNavHidden: false,\r\n            topNavDisabled: false,\r\n            loading: false,\r\n            fields: [\r\n                {\r\n                    valid: false,\r\n                    name: \"name\",\r\n                    value: \"\"\r\n                },\r\n                {\r\n                    valid: false,\r\n                    name: \"email\",\r\n                    value: \"\"\r\n                },\r\n                {\r\n                    valid: false,\r\n                    name: \"password\",\r\n                    value: \"\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ fields: [{ ...this.state.fields[0], form: this.form0 }, { ...this.state.fields[1], form: this.form1 }, { ...this.state.fields[2], form: this.form2 }] });\r\n    }\r\n\r\n    validateEmail(value) {\r\n        let error;\r\n        if (!value) {\r\n            error = \"Please enter your email address\";\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n            error = \"Invalid email address\";\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateName(value) {\r\n        let error;\r\n        if (!value) {\r\n            error = \"Please enter your name\";\r\n        } else if (value.length < 2) {\r\n            error = \"Value must be longer than 2 characters\";\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validatePassword(value) {\r\n        let error;\r\n        if (!value) {\r\n            error = \"Please enter your password\";\r\n        } else if (value.length < 6) {\r\n            error = \"Password must be longer than 6 characters\";\r\n        }\r\n        return error;\r\n    }\r\n\r\n    hideNavigation() {\r\n        this.setState({ bottomNavHidden: true, topNavDisabled: true });\r\n    }\r\n\r\n    asyncLoading () {\r\n        this.setState({ loading: true });\r\n        setTimeout(() => {\r\n            this.setState({ loading: false });\r\n        }, 3000);\r\n    }\r\n\r\n    onClickNext(goToNext, steps, step) {\r\n        if (steps.length - 1 <= steps.indexOf(step)) {\r\n            return;\r\n        }\r\n        let formIndex = steps.indexOf(step);\r\n        let form = this.state.fields[formIndex].form.current;\r\n        let name = this.state.fields[formIndex].name;\r\n        form.submitForm().then(() => {\r\n            let fields = this.state.fields;\r\n            fields[formIndex].value = form.state.values[name];\r\n            fields[formIndex].valid = form.state.errors[name] ? false : true;\r\n            this.setState({ fields });\r\n            if (!form.state.errors[name]) {\r\n                goToNext();\r\n                step.isDone = true;\r\n                if (steps.length - 2 <= steps.indexOf(step)) {\r\n                    this.hideNavigation();\r\n                    this.asyncLoading();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onClickPrev(goToPrev, steps, step) {\r\n        if (steps.indexOf(step) <= 0) {\r\n            return;\r\n        }\r\n        goToPrev();\r\n    }\r\n\r\n    render() {\r\n        const { messages } = this.props.intl;\r\n        return (\r\n            <Card>\r\n                <CardBody className=\"wizard wizard-default\">\r\n                    <Wizard>\r\n                        <TopNavigation className=\"justify-content-center\" disableNav={true} />\r\n                        <Steps>\r\n                            <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Formik\r\n                                        ref={this.form0}\r\n                                        initialValues={{\r\n                                            name: this.state.fields[0].value\r\n                                        }}\r\n                                        onSubmit={() => { }}>\r\n                                        {({ errors, touched }) => (\r\n                                            <Form className=\"av-tooltip tooltip-label-right\">\r\n                                                <FormGroup>\r\n                                                    <Label>{messages[\"forms.name\"]}</Label>\r\n                                                    <Field\r\n                                                        className=\"form-control\"\r\n                                                        name=\"name\"\r\n                                                        validate={this.validateName}\r\n                                                    />\r\n                                                    {errors.name && touched.name && (\r\n                                                        <div className=\"invalid-feedback d-block\">\r\n                                                            {errors.name}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        )}\r\n                                    </Formik>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Formik\r\n                                        ref={this.form1}\r\n                                        initialValues={{\r\n                                            email: this.state.fields[1].value\r\n                                        }}\r\n                                        onSubmit={() => { }}>\r\n                                        {({ errors, touched }) => (\r\n                                            <Form className=\"av-tooltip tooltip-label-right\">\r\n                                                <FormGroup>\r\n                                                    <Label>{messages[\"forms.email\"]}</Label>\r\n                                                    <Field\r\n                                                        className=\"form-control\"\r\n                                                        name=\"email\"\r\n                                                        validate={this.validateEmail}\r\n                                                    />\r\n                                                    {errors.email && touched.email && (\r\n                                                        <div className=\"invalid-feedback d-block\">\r\n                                                            {errors.email}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        )}\r\n                                    </Formik>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Formik\r\n                                        ref={this.form2}\r\n                                        initialValues={{\r\n                                            password: this.state.fields[2].value\r\n                                        }}\r\n                                        onSubmit={() => { }}>\r\n                                        {({ errors, touched }) => (\r\n                                            <Form className=\"av-tooltip tooltip-label-right error-l-75\">\r\n                                                <FormGroup>\r\n                                                    <Label>{messages[\"forms.password\"]}</Label>\r\n                                                    <Field\r\n                                                        className=\"form-control\"\r\n                                                        name=\"password\"\r\n                                                        validate={this.validatePassword}\r\n                                                    />\r\n                                                    {errors.password && touched.password && (\r\n                                                        <div className=\"invalid-feedback d-block\">\r\n                                                            {errors.password}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        )}\r\n                                    </Formik>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step4\" hideTopNav={true}>\r\n                                <div className=\"wizard-basic-step text-center pt-3\">\r\n                                    {\r\n                                        this.state.loading ? (\r\n                                            <div>\r\n                                                <Spinner color=\"primary\" className=\"mb-1\" />\r\n                                                <p><IntlMessages id=\"wizard.async\" /></p>\r\n                                            </div>\r\n                                        ) : (\r\n                                                <div>\r\n                                                    <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                                                    <p><IntlMessages id=\"wizard.registered\" /></p>\r\n                                                </div>\r\n                                            )\r\n                                    }\r\n                                </div>\r\n                            </Step>\r\n                        </Steps>\r\n                        <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className={\"justify-content-center \" + (this.state.bottomNavHidden && \"invisible\")} prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n                    </Wizard>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(Validation)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Row } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\n\r\nclass Layouts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onClickPrev = this.onClickPrev.bind(this);\r\n    this.topNavClick = this.topNavClick.bind(this);\r\n  }\r\n\r\n  topNavClick(stepItem, push) {\r\n    push(stepItem.id);\r\n  }\r\n\r\n  onClickNext(goToNext, steps, step) {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  }\r\n\r\n  onClickPrev(goToPrev, steps, step) {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    return (\r\n      <Row>\r\n        <Colxx xxs=\"12\" xl=\"6\" className=\"mb-5\">\r\n          <Card>\r\n            <CardBody className=\"wizard wizard-default\">\r\n              <Wizard>\r\n                <TopNavigation className=\"justify-content-between\" disableNav={false} topNavClick={this.topNavClick} />\r\n                <Steps>\r\n                  <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                    <div className=\"wizard-basic-step text-center\">\r\n                      <p><IntlMessages id=\"wizard.content-1\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                    <div className=\"wizard-basic-step text-center\">\r\n                      <p><IntlMessages id=\"wizard.content-2\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]} hideTopNav={true}>\r\n                    <div className=\"wizard-basic-step text-center\">\r\n                      <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                      <p><IntlMessages id=\"wizard.content-3\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                </Steps>\r\n                <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-between\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n              </Wizard>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n        <Colxx xxs=\"12\" xl=\"6\">\r\n          <Card>\r\n            <CardBody className=\"wizard wizard-default\">\r\n              <Wizard>\r\n                <TopNavigation className=\"justify-content-start\" disableNav={false} topNavClick={this.topNavClick} />\r\n                <Steps>\r\n                <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                    <div className=\"wizard-basic-step\">\r\n                      <p><IntlMessages id=\"wizard.content-1\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                    <div className=\"wizard-basic-step\">\r\n                      <p><IntlMessages id=\"wizard.content-2\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]} hideTopNav={true}>\r\n                    <div className=\"wizard-basic-step\">\r\n                      <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                      <p><IntlMessages id=\"wizard.content-3\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                </Steps>\r\n                <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-start\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n              </Wizard>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(Layouts)\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport { Colxx, Separator } from \"../../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../../containers/navs/Breadcrumb\";\r\nimport { injectIntl } from 'react-intl';\r\nimport Basic from \"../../../../containers/wizard/Basic\";\r\nimport LastStepEnd from \"../../../../containers/wizard/LastStepEnd\";\r\nimport TopNavDisabled from \"../../../../containers/wizard/TopNavDisabled\";\r\nimport Validation from \"../../../../containers/wizard/Validation\";\r\nimport Layouts from \"../../../../containers/wizard/Layouts\";\r\n\r\nclass FormWizard extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Breadcrumb\r\n              heading=\"menu.form-wizard\"\r\n              match={this.props.match}\r\n            />\r\n            <Separator className=\"mb-5\" />\r\n          </Colxx>\r\n        </Row>\r\n        <Row>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Basic</h5>\r\n            <Basic />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Last Step End</h5>\r\n            <LastStepEnd />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Top Navigation Disabled</h5>\r\n            <TopNavDisabled />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Validation</h5>\r\n            <Validation />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Layouts</h5>\r\n            <Layouts />\r\n          </Colxx>\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(FormWizard)\r\n"],"sourceRoot":""}