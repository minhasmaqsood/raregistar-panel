{"version":3,"sources":["views/app/pages/product/image-list.js","containers/navs/Breadcrumb.js","components/common/CustomSelectInput.js","containers/pages/Pagination.js","containers/pages/DataListView.js","containers/pages/ContextMenuContainer.js","containers/pages/ListPageHeading.js","containers/pages/ImageListView.js","containers/pages/ThumbListView.js","containers/pages/AddNewModal.js"],"names":["collect","props","data","apiUrl","servicePath","ThumbListPages","toggleModal","setState","modalOpen","state","changeOrderBy","column","selectedOrderOption","orderOptions","find","x","dataListRender","changePageSize","size","selectedPageSize","currentPage","changeDisplayMode","mode","displayMode","onChangePage","page","onSearchKey","e","key","search","target","value","toLowerCase","onCheckItem","event","id","tagName","parentElement","lastChecked","selectedItems","includes","filter","push","shiftKey","items","start","getIndex","end","slice","Math","min","max","map","item","Array","from","Set","document","activeElement","blur","handleChangeSelectAll","isToggle","length","onContextMenuClick","console","log","action","onContextMenu","clickedProductId","mouseTrap","require","label","pageSizes","categories","dropdownSplitOpen","totalItemCount","totalPage","isLoading","this","bind","unbind","arr","prop","i","axios","get","then","res","totalItem","match","startIndex","endIndex","className","heading","selectedItemsLength","itemsLength","product","isSelect","Component","getMenuTitle","sub","getUrl","path","index","split","BreadcrumbItems","substr","paths","indexOf","active","to","BreadcrumbContainer","CustomSelectInput","customProps","Object","assign","autoCorrect","autoCapitalize","Input","Pagination","numberLimit","lastIsActive","firstIsActive","startPoint","endPoint","parseInt","points","firstPageButtonClassName","lastPageButtonClassName","prevPageButtonClassName","nextPageButtonClassName","xxs","onClick","React","memo","classnames","title","category","date","color","statusColor","pill","status","type","checked","onChange","ContextMenuContainer","onShow","detail","ListPageHeading","toggleDisplayOptions","prevState","displayOptionsIsOpen","toggleSplit","messages","intl","isOpen","toggle","caret","right","href","order","name","placeholder","onKeyPress","injectIntl","sm","lg","xl","top","alt","src","img","AddNewModal","wrapClassName","backdrop","components","classNamePrefix","options","outline"],"mappings":"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","file":"static/js/product-image-list.abcbe750.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport { servicePath } from \"../../../../constants/defaultValues\";\r\n\r\nimport DataListView from \"../../../../containers/pages/DataListView\";\r\nimport Pagination from \"../../../../containers/pages/Pagination\";\r\nimport ContextMenuContainer from \"../../../../containers/pages/ContextMenuContainer\";\r\nimport ListPageHeading from \"../../../../containers/pages/ListPageHeading\";\r\nimport ImageListView from \"../../../../containers/pages/ImageListView\";\r\nimport ThumbListView from \"../../../../containers/pages/ThumbListView\";\r\nimport AddNewModal from \"../../../../containers/pages/AddNewModal\";\r\n\r\nfunction collect(props) {\r\n  return { data: props.data };\r\n}\r\nconst apiUrl = servicePath + \"/cakes/paging\";\r\n\r\nclass ThumbListPages extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouseTrap = require('mousetrap');\r\n\r\n\r\n    this.state = {\r\n      displayMode: \"imagelist\",\r\n\r\n      selectedPageSize: 8,\r\n      orderOptions: [\r\n        { column: \"title\", label: \"Product Name\" },\r\n        { column: \"category\", label: \"Category\" },\r\n        { column: \"status\", label: \"Status\" }\r\n      ],\r\n      pageSizes: [8, 12, 24],\r\n\r\n      categories: [\r\n        { label: \"Cakes\", value: \"Cakes\", key: 0 },\r\n        { label: \"Cupcakes\", value: \"Cupcakes\", key: 1 },\r\n        { label: \"Desserts\", value: \"Desserts\", key: 2 }\r\n      ],\r\n\r\n      selectedOrderOption: { column: \"title\", label: \"Product Name\" },\r\n      dropdownSplitOpen: false,\r\n      modalOpen: false,\r\n      currentPage: 1,\r\n      totalItemCount: 0,\r\n      totalPage: 1,\r\n      search: \"\",\r\n      selectedItems: [],\r\n      lastChecked: null,\r\n      isLoading: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.dataListRender();\r\n    this.mouseTrap.bind([\"ctrl+a\", \"command+a\"], () =>\r\n      this.handleChangeSelectAll(false)\r\n    );\r\n    this.mouseTrap.bind([\"ctrl+d\", \"command+d\"], () => {\r\n      this.setState({\r\n        selectedItems: []\r\n      });\r\n      return false;\r\n    });\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    this.mouseTrap.unbind(\"ctrl+a\");\r\n    this.mouseTrap.unbind(\"command+a\");\r\n    this.mouseTrap.unbind(\"ctrl+d\");\r\n    this.mouseTrap.unbind(\"command+d\");\r\n  }\r\n\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modalOpen: !this.state.modalOpen\r\n    });\r\n  };\r\n\r\n  changeOrderBy = column => {\r\n    this.setState(\r\n      {\r\n        selectedOrderOption: this.state.orderOptions.find(\r\n          x => x.column === column\r\n        )\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n  changePageSize = size => {\r\n    this.setState(\r\n      {\r\n        selectedPageSize: size,\r\n        currentPage: 1\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n  changeDisplayMode = mode => {\r\n    this.setState({\r\n      displayMode: mode\r\n    });\r\n    return false;\r\n  };\r\n  onChangePage = page => {\r\n    this.setState(\r\n      {\r\n        currentPage: page\r\n      },\r\n      () => this.dataListRender()\r\n    );\r\n  };\r\n\r\n  onSearchKey = e => {\r\n    if (e.key === \"Enter\") {\r\n      this.setState(\r\n        {\r\n          search: e.target.value.toLowerCase()\r\n        },\r\n        () => this.dataListRender()\r\n      );\r\n    }\r\n  };\r\n\r\n  onCheckItem = (event, id) => {\r\n    if (\r\n      event.target.tagName === \"A\" ||\r\n      (event.target.parentElement && event.target.parentElement.tagName === \"A\")\r\n    ) {\r\n      return true;\r\n    }\r\n    if (this.state.lastChecked === null) {\r\n      this.setState({\r\n        lastChecked: id\r\n      });\r\n    }\r\n\r\n    let selectedItems = this.state.selectedItems;\r\n    if (selectedItems.includes(id)) {\r\n      selectedItems = selectedItems.filter(x => x !== id);\r\n    } else {\r\n      selectedItems.push(id);\r\n    }\r\n    this.setState({\r\n      selectedItems\r\n    });\r\n\r\n    if (event.shiftKey) {\r\n      var items = this.state.items;\r\n      var start = this.getIndex(id, items, \"id\");\r\n      var end = this.getIndex(this.state.lastChecked, items, \"id\");\r\n      items = items.slice(Math.min(start, end), Math.max(start, end) + 1);\r\n      selectedItems.push(\r\n        ...items.map(item => {\r\n          return item.id;\r\n        })\r\n      );\r\n      selectedItems = Array.from(new Set(selectedItems));\r\n      this.setState({\r\n        selectedItems\r\n      });\r\n    }\r\n    document.activeElement.blur();\r\n  };\r\n\r\n  getIndex(value, arr, prop) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i][prop] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  handleChangeSelectAll = isToggle => {\r\n    if (this.state.selectedItems.length >= this.state.items.length) {\r\n      if (isToggle) {\r\n        this.setState({\r\n          selectedItems: []\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        selectedItems: this.state.items.map(x => x.id)\r\n      });\r\n    }\r\n    document.activeElement.blur();\r\n    return false;\r\n  };\r\n\r\n  dataListRender() {\r\n    const {\r\n      selectedPageSize,\r\n      currentPage,\r\n      selectedOrderOption,\r\n      search\r\n    } = this.state;\r\n    axios\r\n      .get(\r\n        `${apiUrl}?pageSize=${selectedPageSize}&currentPage=${currentPage}&orderBy=${\r\n          selectedOrderOption.column\r\n        }&search=${search}`\r\n      )\r\n      .then(res => {\r\n        return res.data;\r\n      })\r\n      .then(data => {\r\n        this.setState({\r\n          totalPage: data.totalPage,\r\n          items: data.data,\r\n          selectedItems: [],\r\n          totalItemCount: data.totalItem,\r\n          isLoading: true\r\n        });\r\n      });\r\n  }\r\n\r\n  onContextMenuClick = (e, data, target) => {\r\n    console.log(\r\n      \"onContextMenuClick - selected items\",\r\n      this.state.selectedItems\r\n    );\r\n    console.log(\"onContextMenuClick - action : \", data.action);\r\n  };\r\n\r\n  onContextMenu = (e, data) => {\r\n    const clickedProductId = data.data;\r\n    if (!this.state.selectedItems.includes(clickedProductId)) {\r\n      this.setState({\r\n        selectedItems: [clickedProductId]\r\n      });\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      currentPage,\r\n      items,\r\n      displayMode,\r\n      selectedPageSize,\r\n      totalItemCount,\r\n      selectedOrderOption,\r\n      selectedItems,\r\n      orderOptions,\r\n      pageSizes,\r\n      modalOpen,\r\n      categories\r\n    } = this.state;\r\n    const { match } = this.props;\r\n    const startIndex = (currentPage - 1) * selectedPageSize;\r\n    const endIndex = currentPage * selectedPageSize;\r\n\r\n    return !this.state.isLoading ? (\r\n      <div className=\"loading\" />\r\n    ) : (\r\n      <Fragment>\r\n        <div className=\"disable-text-selection\">\r\n          <ListPageHeading\r\n            heading=\"menu.image-list\"\r\n            displayMode={displayMode}\r\n            changeDisplayMode={this.changeDisplayMode}\r\n            handleChangeSelectAll={this.handleChangeSelectAll}\r\n            changeOrderBy={this.changeOrderBy}\r\n            changePageSize={this.changePageSize}\r\n            selectedPageSize={selectedPageSize}\r\n            totalItemCount={totalItemCount}\r\n            selectedOrderOption={selectedOrderOption}\r\n            match={match}\r\n            startIndex={startIndex}\r\n            endIndex={endIndex}\r\n            selectedItemsLength={selectedItems ? selectedItems.length : 0}\r\n            itemsLength={items ? items.length : 0}\r\n            onSearchKey={this.onSearchKey}\r\n            orderOptions={orderOptions}\r\n            pageSizes={pageSizes}\r\n            toggleModal={this.toggleModal}\r\n          />\r\n          <AddNewModal\r\n            modalOpen={modalOpen}\r\n            toggleModal={this.toggleModal}\r\n            categories={categories}\r\n          />\r\n          <Row>\r\n            {this.state.items.map(product => {\r\n              if (this.state.displayMode === \"imagelist\") {\r\n                return (\r\n                  <ImageListView\r\n                    key={product.id}\r\n                    product={product}\r\n                    isSelect={this.state.selectedItems.includes(product.id)}\r\n                    collect={collect}\r\n                    onCheckItem={this.onCheckItem}\r\n                  />\r\n                );\r\n              } else if (this.state.displayMode === \"thumblist\") {\r\n                return (\r\n                  <ThumbListView\r\n                    key={product.id}\r\n                    product={product}\r\n                    isSelect={this.state.selectedItems.includes(product.id)}\r\n                    collect={collect}\r\n                    onCheckItem={this.onCheckItem}\r\n                  />\r\n                );\r\n              } else {\r\n                return (\r\n                  <DataListView\r\n                    key={product.id}\r\n                    product={product}\r\n                    isSelect={this.state.selectedItems.includes(product.id)}\r\n                    onCheckItem={this.onCheckItem}\r\n                    collect={collect}\r\n                  />\r\n                );\r\n              }\r\n            })}{\" \"}\r\n            <Pagination\r\n              currentPage={this.state.currentPage}\r\n              totalPage={this.state.totalPage}\r\n              onChangePage={i => this.onChangePage(i)}\r\n            />\r\n            <ContextMenuContainer\r\n              onContextMenuClick={this.onContextMenuClick}\r\n              onContextMenu={this.onContextMenu}\r\n            />\r\n          </Row>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default ThumbListPages;\r\n","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React from \"react\";\r\nimport { components } from \"react-select\";\r\n\r\nconst CustomSelectInput = props => {\r\n  var customProps = Object.assign({}, props);\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput\r\n","import React from \"react\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport { Nav, NavItem, NavLink } from \"reactstrap\";\r\nclass Pagination extends React.Component {\r\n  componentDidMount() {}\r\n  onChangePage(e) {\r\n    this.props.onChangePage(e);\r\n  }\r\n  render() {\r\n    const {\r\n      totalPage = 0,\r\n      currentPage = 1,\r\n      numberLimit = 5,\r\n      lastIsActive = true,\r\n      firstIsActive = true\r\n    } = this.props;\r\n\r\n    let startPoint = 1;\r\n    let endPoint = numberLimit;\r\n\r\n    if (numberLimit > totalPage) {\r\n      startPoint = 1;\r\n      endPoint = totalPage;\r\n    } else if (currentPage <= parseInt(numberLimit / 2, 10)) {\r\n      startPoint = 1;\r\n      endPoint = numberLimit;\r\n    } else if (currentPage + parseInt(numberLimit / 2, 10) <= totalPage) {\r\n      startPoint = currentPage - parseInt(numberLimit / 2, 10);\r\n      endPoint = currentPage + parseInt(numberLimit / 2, 10);\r\n    } else {\r\n      startPoint = totalPage - (numberLimit - 1);\r\n      endPoint = totalPage;\r\n    }\r\n    startPoint = startPoint === 0 ? 1 : startPoint;\r\n    const points = [];\r\n    for (var i = startPoint; i <= endPoint; i++) {\r\n      points.push(i);\r\n    }\r\n\r\n    let firstPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let lastPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    let prevPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let nextPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    return totalPage > 0 ? (\r\n        <Colxx xxs=\"12\" className=\"mt-3\">\r\n          <Nav className=\"pagination justify-content-center\">\r\n            {firstIsActive && (\r\n                <NavItem className={`page-item ${firstPageButtonClassName}`}>\r\n                  <NavLink\r\n                      className=\"page-link first\"\r\n                      onClick={() => this.onChangePage(1)}>\r\n                    <i className=\"simple-icon-control-start\" />\r\n                  </NavLink>\r\n                </NavItem>\r\n            )}\r\n\r\n            <NavItem className={`page-item ${prevPageButtonClassName}`}>\r\n              <NavLink\r\n                  className=\"page-link prev\"\r\n                  onClick={() => this.onChangePage(currentPage - 1)}\r\n              >\r\n                <i className=\"simple-icon-arrow-left\" />\r\n              </NavLink>\r\n            </NavItem>\r\n            {points.map(i => {\r\n              return (\r\n                  <NavItem\r\n                      key={i}\r\n                      className={`page-item ${currentPage === i && \"active\"}`}>\r\n                    <NavLink\r\n                        className=\"page-link\"\r\n                        onClick={() => this.onChangePage(i)}\r\n                    >\r\n                      {i}\r\n                    </NavLink>\r\n                  </NavItem>\r\n              );\r\n            })}\r\n            <NavItem className={`page-item ${nextPageButtonClassName}`}>\r\n              <NavLink\r\n                  className=\"page-link next\"\r\n                  onClick={() => this.onChangePage(currentPage + 1)}\r\n              >\r\n                <i className=\"simple-icon-arrow-right\" />\r\n              </NavLink>\r\n            </NavItem>\r\n            {lastIsActive && (\r\n                <NavItem className={`page-item ${lastPageButtonClassName}`}>\r\n                  <NavLink\r\n                      className=\"page-link last\"\r\n                      onClick={() => this.onChangePage(totalPage)}>\r\n                    <i className=\"simple-icon-control-end\" />\r\n                  </NavLink>\r\n                </NavItem>\r\n            )}\r\n          </Nav>\r\n        </Colxx>\r\n    ) : (\r\n        <Colxx xxs=\"12\" className=\"mt-2\" />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport { Card, CustomInput, Badge } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\n\r\nconst DataListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx xxs=\"12\" className=\"mb-3\">\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={event => onCheckItem(event, product.id)}\r\n          className={classnames(\"d-flex flex-row\", {\r\n            active: isSelect\r\n          })}\r\n        >\r\n          <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\r\n            <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\r\n              <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n                <p className=\"list-item-heading mb-1 truncate\">\r\n                  {product.title}\r\n                </p>\r\n              </NavLink>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.category}\r\n              </p>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.date}\r\n              </p>\r\n              <div className=\"w-15 w-sm-100\">\r\n                <Badge color={product.statusColor} pill>\r\n                  {product.status}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox pl-1 align-self-center pr-4\">\r\n              <CustomInput\r\n                className=\"item-check mb-0\"\r\n                type=\"checkbox\"\r\n                id={`check_${product.id}`}\r\n                checked={isSelect}\r\n                onChange={() => {}}\r\n                label=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(DataListView);\r\n","import React from \"react\";\r\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\r\n\r\nconst ContextMenuContainer = ({onContextMenu,onContextMenuClick}) => {\r\n  return (\r\n    <ContextMenu\r\n      id=\"menu_id\"\r\n      onShow={e => onContextMenu(e, e.detail.data)}\r\n    >\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: \"copy\" }}>\r\n        <i className=\"simple-icon-docs\" /> <span>Copy</span>\r\n      </MenuItem>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: \"move\" }}>\r\n        <i className=\"simple-icon-drawer\" /> <span>Move to archive</span>\r\n      </MenuItem>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: \"delete\" }}>\r\n        <i className=\"simple-icon-trash\" /> <span>Delete</span>\r\n      </MenuItem>\r\n    </ContextMenu>\r\n  );\r\n};\r\n\r\nexport default ContextMenuContainer;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Row,\r\n  Button,\r\n  ButtonDropdown,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  CustomInput,\r\n  Collapse\r\n} from \"reactstrap\";\r\nimport { injectIntl } from \"react-intl\";\r\n\r\nimport { Colxx, Separator } from \"../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../navs/Breadcrumb\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nimport {\r\n  DataListIcon,\r\n  ThumbListIcon,\r\n  ImageListIcon\r\n} from \"../../components/svg\";\r\nclass ListPageHeading extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      dropdownSplitOpen: false,\r\n      displayOptionsIsOpen: false\r\n    };\r\n  }\r\n\r\n  toggleDisplayOptions = () => {\r\n    this.setState(prevState => ({\r\n      displayOptionsIsOpen: !prevState.displayOptionsIsOpen\r\n    }));\r\n  };\r\n  toggleSplit =()=> {\r\n    this.setState(prevState => ({\r\n      dropdownSplitOpen: !prevState.dropdownSplitOpen\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    const {\r\n      displayMode,\r\n      changeDisplayMode,\r\n      handleChangeSelectAll,\r\n      changeOrderBy,\r\n      changePageSize,\r\n      selectedPageSize,\r\n      totalItemCount,\r\n      selectedOrderOption,\r\n      match,\r\n      startIndex,\r\n      endIndex,\r\n      selectedItemsLength,\r\n      itemsLength,\r\n      onSearchKey,\r\n      orderOptions,\r\n      pageSizes,\r\n      toggleModal,\r\n      heading\r\n    } = this.props;\r\n\r\n    const { displayOptionsIsOpen, dropdownSplitOpen } = this.state;\r\n    return (\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <div className=\"mb-2\">\r\n            <h1>\r\n              <IntlMessages id={heading} />\r\n            </h1>\r\n\r\n            <div className=\"text-zero top-right-button-container\">\r\n              <Button\r\n                color=\"primary\"\r\n                size=\"lg\"\r\n                className=\"top-right-button\"\r\n                onClick={()=>toggleModal()}>\r\n                <IntlMessages id=\"pages.add-new\" />\r\n              </Button>\r\n              {\"  \"}\r\n              <ButtonDropdown\r\n                isOpen={dropdownSplitOpen}\r\n                toggle={this.toggleSplit}>\r\n                <div className=\"btn btn-primary btn-lg pl-4 pr-0 check-button check-all\">\r\n                    <CustomInput\r\n                      className=\"custom-checkbox mb-0 d-inline-block\"\r\n                      type=\"checkbox\"\r\n                      id=\"checkAll\"\r\n                      checked={selectedItemsLength >= itemsLength}\r\n                      onChange={() => handleChangeSelectAll(true)}\r\n                      label={\r\n                        <span\r\n                          className={`custom-control-label ${\r\n                            selectedItemsLength > 0 &&\r\n                            selectedItemsLength < itemsLength\r\n                              ? \"indeterminate\"\r\n                              : \"\"\r\n                          }`}\r\n                        />\r\n                      }\r\n                    />\r\n                </div>\r\n                <DropdownToggle\r\n                  caret\r\n                  color=\"primary\"\r\n                  className=\"dropdown-toggle-split btn-lg\"/>\r\n                <DropdownMenu right>\r\n                  <DropdownItem>\r\n                    <IntlMessages id=\"pages.delete\" />\r\n                  </DropdownItem>\r\n                  <DropdownItem>\r\n                    <IntlMessages id=\"pages.another-action\" />\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </ButtonDropdown>\r\n            </div>\r\n            <Breadcrumb match={match} />\r\n          </div>\r\n\r\n          <div className=\"mb-2\">\r\n            <Button\r\n              color=\"empty\"\r\n              className=\"pt-0 pl-0 d-inline-block d-md-none\"\r\n              onClick={this.toggleDisplayOptions}\r\n            >\r\n              <IntlMessages id=\"pages.display-options\" />{\" \"}\r\n              <i className=\"simple-icon-arrow-down align-middle\" />\r\n            </Button>\r\n            <Collapse\r\n              isOpen={displayOptionsIsOpen}\r\n              className=\"d-md-block\"\r\n              id=\"displayOptions\">\r\n              <span className=\"mr-3 d-inline-block float-md-left\">\r\n                <a\r\n                  href=\"#/\"\r\n                  className={`mr-2 view-icon ${\r\n                    displayMode === \"list\" ? \"active\" : \"\"\r\n                  }`}\r\n                  onClick={() => changeDisplayMode(\"list\")}>\r\n                  <DataListIcon />\r\n                </a>\r\n                <a\r\n                  href=\"#/\"\r\n                  className={`mr-2 view-icon ${\r\n                    displayMode === \"thumblist\" ? \"active\" : \"\"\r\n                  }`}\r\n                  onClick={() => changeDisplayMode(\"thumblist\")}>\r\n                  <ThumbListIcon />\r\n                </a>\r\n                <a\r\n                  href=\"#/\"\r\n                  className={`mr-2 view-icon ${\r\n                    displayMode === \"imagelist\" ? \"active\" : \"\"\r\n                  }`}\r\n                  onClick={() => changeDisplayMode(\"imagelist\")}>\r\n                  <ImageListIcon />\r\n                </a>\r\n              </span>\r\n\r\n              <div className=\"d-block d-md-inline-block pt-1\">\r\n                <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                  <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                    <IntlMessages id=\"pages.orderby\" />\r\n                    {selectedOrderOption.label}\r\n                  </DropdownToggle>\r\n                  <DropdownMenu>\r\n                    {orderOptions.map((order, index) => {\r\n                      return (\r\n                        <DropdownItem\r\n                          key={index}\r\n                          onClick={() => changeOrderBy(order.column)}\r\n                        >\r\n                          {order.label}\r\n                        </DropdownItem>\r\n                      );\r\n                    })}\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n                <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"keyword\"\r\n                    id=\"search\"\r\n                    placeholder={messages[\"menu.search\"]}\r\n                    onKeyPress={e => onSearchKey(e)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"float-md-right pt-1\">\r\n                <span className=\"text-muted text-small mr-1\">{`${startIndex}-${endIndex} of ${totalItemCount} `}</span>\r\n                <UncontrolledDropdown className=\"d-inline-block\">\r\n                  <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                    {selectedPageSize}\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    {pageSizes.map((size, index) => {\r\n                      return (\r\n                        <DropdownItem\r\n                          key={index}\r\n                          onClick={() => changePageSize(size)}\r\n                        >\r\n                          {size}\r\n                        </DropdownItem>\r\n                      );\r\n                    })}\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              </div>\r\n            </Collapse>\r\n          </div>\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectIntl(ListPageHeading);\r\n","import React from \"react\";\r\nimport {\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  CardSubtitle,\r\n  CardImg,\r\n  CardText,\r\n  CustomInput,\r\n  Badge\r\n} from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\n\r\nconst ImageListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx sm=\"6\" lg=\"4\" xl=\"3\" className=\"mb-3\" key={product.id}>\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={event => onCheckItem(event, product.id)}\r\n          className={classnames({\r\n            active: isSelect\r\n          })}\r\n        >\r\n          <div className=\"position-relative\">\r\n            <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n              <CardImg top alt={product.title} src={product.img} />\r\n            </NavLink>\r\n            <Badge\r\n              color={product.statusColor}\r\n              pill\r\n              className=\"position-absolute badge-top-left\"\r\n            >\r\n              {product.status}\r\n            </Badge>\r\n          </div>\r\n          <CardBody>\r\n            <Row>\r\n              <Colxx xxs=\"2\">\r\n                <CustomInput\r\n                  className=\"item-check mb-0\"\r\n                  type=\"checkbox\"\r\n                  id={`check_${product.id}`}\r\n                  checked={isSelect}\r\n                  onChange={() => {}}\r\n                  label=\"\"/>\r\n              </Colxx>\r\n              <Colxx xxs=\"10\" className=\"mb-3\">\r\n                <CardSubtitle>{product.title}</CardSubtitle>\r\n                <CardText className=\"text-muted text-small mb-0 font-weight-light\">\r\n                  {product.date}\r\n                </CardText>\r\n              </Colxx>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(ImageListView);\r\n","import React from \"react\";\r\nimport { Card, CustomInput, Badge } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\n\r\nconst ThumbListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx xxs=\"12\" key={product.id} className=\"mb-3\">\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={event => onCheckItem(event, product.id)}\r\n          className={classnames(\"d-flex flex-row\", {\r\n            active: isSelect\r\n          })}\r\n        >\r\n          <NavLink to={`?p=${product.id}`} className=\"d-flex\">\r\n            <img\r\n              alt={product.title}\r\n              src={product.img}\r\n              className=\"list-thumbnail responsive border-0 card-img-left\"\r\n            />\r\n          </NavLink>\r\n          <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\r\n            <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\r\n              <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n                <p className=\"list-item-heading mb-1 truncate\">\r\n                  {product.title}\r\n                </p>\r\n              </NavLink>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.category}\r\n              </p>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.date}\r\n              </p>\r\n              <div className=\"w-15 w-sm-100\">\r\n                <Badge color={product.statusColor} pill>\r\n                  {product.status}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox pl-1 align-self-center pr-4\">\r\n              <CustomInput\r\n                className=\"item-check mb-0\"\r\n                type=\"checkbox\"\r\n                id={`check_${product.id}`}\r\n                checked={isSelect}\r\n                onChange={()=>{}}\r\n                label=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(ThumbListView);\r\n","import React from \"react\";\r\nimport {\r\n  CustomInput,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport CustomSelectInput from \"../../components/common/CustomSelectInput\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst AddNewModal = ({ modalOpen, toggleModal, categories }) => {\r\n  return (\r\n    <Modal\r\n      isOpen={modalOpen}\r\n      toggle={toggleModal}\r\n      wrapClassName=\"modal-right\"\r\n      backdrop=\"static\"\r\n    >\r\n      <ModalHeader toggle={toggleModal}>\r\n        <IntlMessages id=\"pages.add-new-modal-title\" />\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Label>\r\n          <IntlMessages id=\"pages.product-name\" />\r\n        </Label>\r\n        <Input />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.category\" />\r\n        </Label>\r\n        <Select\r\n          components={{ Input: CustomSelectInput }}\r\n          className=\"react-select\"\r\n          classNamePrefix=\"react-select\"\r\n          name=\"form-field-name\"\r\n          options={categories}\r\n        />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.description\" />\r\n        </Label>\r\n        <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.status\" />\r\n        </Label>\r\n        <CustomInput\r\n          type=\"radio\"\r\n          id=\"exCustomRadio\"\r\n          name=\"customRadio\"\r\n          label=\"ON HOLD\"\r\n        />\r\n        <CustomInput\r\n          type=\"radio\"\r\n          id=\"exCustomRadio2\"\r\n          name=\"customRadio\"\r\n          label=\"PROCESSED\"\r\n        />\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"secondary\" outline onClick={toggleModal}>\r\n          <IntlMessages id=\"pages.cancel\" />\r\n        </Button>\r\n        <Button color=\"primary\" onClick={toggleModal}>\r\n          <IntlMessages id=\"pages.submit\" />\r\n        </Button>{\" \"}\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddNewModal;\r\n"],"sourceRoot":""}