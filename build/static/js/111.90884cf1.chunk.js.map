{"version":3,"sources":["views/app/result/translations.js","components/DataTradesTable/index.js","views/app/settings/trasnlations-modal.js","components/VideoUploader/index.js"],"names":["Column","Table","HeaderCell","Cell","Translations","getAllResults","a","setState","spinning","guideId","parseInt","props","match","params","id","_isMounted","ApiCall","Url","RESULTS","config","get","response","status","translations","data","results","filter","item","length","rows","details","map","position","languages","AddResultList","console","log","state","el","index","key","xs","sm","type","value","onChange","e","handleRowsAttributeChange","name","placeholder","required","event","target","handleResultInputChange","handleChangePage","dataKey","page","handleChangeLength","displayLength","getData","v","i","start","handleSelectLanguage","selectedLanguage","toggle","showModal","heading","body","subTitle","sub_heading","total","language","language_id","modalMethod","translationId","storeTranslation","validation","handleValidation","loadingApi","STORE_RESULT_TRANSLATIONS","entity_id","post","NotificationManager","success","error","message","updateTranslation","UPDATE_RESULT_TRANSLATIONS","languageValidation","deleteTranslation","confirmAlert","title","buttons","label","onClick","confirmDeleteTranslation","DELETE_TRANSLATION","loading","entityId","this","xxs","className","to","size","color","activePage","onChangePage","onChangeLength","width","fixed","align","rowData","rowIndex","minWidth","flexGrow","addResultList","translationContent","Component","Pagination","DataTradesTable","children","autoHeight","bordered","cellBordered","virtualized","hover","shouldUpdateScroll","lengthMenu","quillModules","toolbar","list","indent","quillFormats","TranslationsModal","handleChangeTranslationContent","handleInputChange","handleGuidesInputChange","question","answer","paragraph","handleChangeParagraph","handleCategoryInputChange","categoryName","handleChangeChatMessage","onHomeVideoComplete","onCourseVideoComplete","handleChangeEmailTranslationContent","storeEmailTemplates","isOpen","row","theme","modules","formats","uploadUrl","UPLOAD_HOME_VIDEO_TRANSLATION","isMulti","chunkSize","onUploadComplete","UPLOAD_COURSE_VIDEO_TRANSLATION","disabled","VideoUploader","args","uploadObj","asyncSettings","itemData","onRemoveFile","postRawFile","onPausing","isInteraction","navigator","onLine","onResuming","onBeforeFailure","proxy","cancel","clearTimeInterval","setInterval","isNullOrUndefined","filesData","statusCode","resume","clearSetInterval","pause","clearInterval","ddlDatas","fields","text","saveUrl","autoUpload","minFileSize","maxFileSize","multiple","ref","scope","actionComplete","allowedExtensions","removing","pausing","resuming","chunkFailure"],"mappings":"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","file":"static/js/111.90884cf1.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport {Row, Col, CardBody, CardTitle, Card, Button, FormGroup, Input,} from \"reactstrap\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport ApiCall from '../../../config/network';\r\nimport Url from '../../../config/api';\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport {config} from \"../../../config/env\";\r\n// import { confirmAlert } from 'react-confirm-alert';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Table} from \"rsuite\";\r\nimport '../table.css';\r\nimport DataTradesTable from \"../../../components/DataTradesTable\";\r\nimport TranslationsModal from \"../settings/trasnlations-modal\";\r\nimport {confirmAlert} from \"react-confirm-alert\";\r\n\r\nconst { Column, HeaderCell, Cell,  } = Table;\r\n\r\nexport default class Translations extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            heading: '',\r\n            subTitle: '',\r\n            total: '',\r\n            rows: [],\r\n            loading: false,\r\n            languages: [],\r\n            entityId: '',\r\n            translations: [],\r\n            spinning: true,\r\n            selectedLanguage: '',\r\n            translationId: null,\r\n            modalMethod: '',\r\n            loadingApi: false,\r\n            showModal: false,\r\n            //Pagination\r\n            displayLength: 10,\r\n            page: 1\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this._isMounted = false\r\n        this.getAllResults();\r\n    };\r\n    getAllResults = async () => {\r\n        this.setState({spinning: true});\r\n        const guideId = parseInt(this.props.match.params.id)\r\n        if(!this._isMounted){\r\n            let response = await ApiCall.get(Url.RESULTS, await config())\r\n            if(response.status=== 200){\r\n                const translations =\r\n                    response.data.results.filter(item => item.id === guideId).length> 0?\r\n                        response.data.results.filter(item => item.id === guideId)[0].translations : []\r\n                const rows =  response.data.results.filter(item => item.id === guideId).length> 0?\r\n                    response.data.results.filter(item => item.id === guideId)[0].details.map(item => {\r\n                        return {position: \"\"}\r\n                    }) : []\r\n                this.setState({\r\n                    languages: response.data.languages,\r\n                    rows,\r\n                    translations,\r\n                    spinning: false\r\n                });\r\n            }\r\n        }\r\n\r\n    };\r\n    AddResultList = () => {\r\n        console.log(this.state)\r\n        return this.state.rows.map((el, index) => (\r\n            <div key={index}>\r\n                <Row>\r\n                    <Col xs='10'>\r\n                        <FormGroup>\r\n                            <Colxx sm=\"12\">\r\n                                <Input type=\"text\" value={this.state.rows[index].position} onChange={(e) => this.handleRowsAttributeChange(e, index)} name=\"position\" placeholder={`Position ${index + 1} *`} required/>\r\n                            </Colxx>\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                {/*<hr />*/}\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    handleRowsAttributeChange = (event, index) => {\r\n        if(event.target.name === 'position'){\r\n            let rows = this.state.rows;\r\n            rows[index].position = event.target.value;\r\n            this.setState({ rows })\r\n        }\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = true\r\n    };\r\n    handleResultInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    handleChangePage = (dataKey) => {\r\n        this.setState({\r\n            page: dataKey\r\n        });\r\n    };\r\n    handleChangeLength = (dataKey) => {\r\n        this.setState({\r\n            page: 1,\r\n            displayLength: dataKey\r\n        });\r\n    };\r\n    getData = () => {\r\n        const {displayLength, page, translations} = this.state;\r\n        return translations.filter((v, i) => {\r\n            const start = displayLength * (page - 1);\r\n            const end = start + displayLength;\r\n            return i >= start && i < end;\r\n        });\r\n    };\r\n    handleSelectLanguage = (e) => {\r\n        this.setState({\r\n            selectedLanguage: e.target.value\r\n        })\r\n    };\r\n    toggle = (item) => {\r\n        this.setState({\r\n            showModal: !this.state.showModal\r\n        })\r\n        if (item.id) {\r\n            this.setState({\r\n                heading: item.body[0].heading,\r\n                subTitle: item.body[0].sub_heading,\r\n                total: item.body[0].total,\r\n                rows: item.body[0].details,\r\n                selectedLanguage: item.language? item.language.id : item.language_id,\r\n                modalMethod: 'update',\r\n                translationId: item.id\r\n            })\r\n        }else {\r\n            console.log(this.state)\r\n            this.setState({\r\n                heading: '',\r\n                subTitle: '',\r\n                total: '',\r\n                rows: this.state.rows.map(() => {return {position: \"\"}} ),\r\n                selectedLanguage: '',\r\n                modalMethod: 'store'\r\n            })\r\n        }\r\n    };\r\n    storeTranslation = async () => {\r\n        const {selectedLanguage, heading, subTitle, total, rows} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.STORE_RESULT_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  this.props.match.params.id,\r\n                heading,\r\n                sub_heading: subTitle,\r\n                total: total,\r\n                details: rows\r\n            }, await config())\r\n            if(response.status === 200){\r\n                this.setState({\r\n                    showModal: false,\r\n                    heading: '',\r\n                    subTitle: '',\r\n                    total: '',\r\n                    // rows: [],\r\n                    loadingApi: false\r\n                })\r\n                this.getAllResults();\r\n                return NotificationManager.success(\r\n                    \"Translation Stored Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    updateTranslation = async () => {\r\n        const {selectedLanguage,  translationId,  heading, subTitle, total, rows} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.UPDATE_RESULT_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  this.props.match.params.id,\r\n                heading: heading,\r\n                sub_heading:subTitle,\r\n                total:total,\r\n                details:rows,\r\n                id: translationId\r\n            }, await config())\r\n            if(response.status === 200){\r\n                this.setState({\r\n                    heading: '',\r\n                    subTitle: '',\r\n                    total: \"\",\r\n                    showModal: false,\r\n                    loadingApi: false\r\n                })\r\n                this.getAllResults();\r\n                return NotificationManager.success(\r\n                    \"Translation Updated Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    handleValidation = () => {\r\n        const {selectedLanguage, heading, subTitle, total} = this.state;\r\n        let languageValidation = {\r\n            message: 'Please Select Language',\r\n            status: false\r\n        };\r\n        let headingValidation = {\r\n            message: 'Please write Heading',\r\n            status: false\r\n        };\r\n        let totalValidation = {\r\n            message: 'Please write Total',\r\n            status: false\r\n        };\r\n        let subTitleValidation = {\r\n            message: 'Please write Sub Title',\r\n            status: false\r\n        };\r\n        let passed = {\r\n            status: true\r\n        };\r\n        return selectedLanguage !== null?\r\n            selectedLanguage === \"\"? languageValidation :\r\n                selectedLanguage === \"Please Select Language\"? languageValidation :\r\n                    heading === \"\"? headingValidation :\r\n                        subTitle === \"\"? subTitleValidation :\r\n                        total === \"\"? totalValidation :\r\n                            passed\r\n            : languageValidation\r\n\r\n    };\r\n     deleteTranslation  =  (item) => {\r\n        confirmAlert({\r\n            title: 'Confirmation!',\r\n            message: 'Are you sure you want to Delete This Translation?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: () => this.confirmDeleteTranslation(item)\r\n                },\r\n                {\r\n                    label: \"No\",\r\n                }\r\n            ]\r\n        })\r\n    };\r\n     confirmDeleteTranslation = async (id) => {\r\n        let response = await ApiCall.post(Url.DELETE_TRANSLATION, {\r\n            id: id,\r\n        }, await config());\r\n        if(response.status === 200){\r\n            this.getAllResults();\r\n            return  NotificationManager.success(\r\n                \"Translation deleted Successfully\",\r\n                \"Success\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    render() {\r\n        const data = this.getData()\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n\r\n                        <div className=\"text-zero top-right-button-container\">\r\n                            <Link to='/app/results/view'><Button size='lg' color={'secondary'}>Go Back</Button></Link>\r\n                        </div>\r\n                        <Breadcrumb heading=\"faq.view\" match={this.props.match} />\r\n                        <Separator className=\"mb-5\" />\r\n                    </Colxx>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"h-100\">\r\n                            <CardBody>\r\n                                {/*<div className='d-flex justify-content-left align-items-center mb-5'>*/}\r\n                                {/*    Question:*/}\r\n                                {/*</div>*/}\r\n                                <CardTitle>\r\n                                    Translations | <Button size='xs' color='primary'\r\n                                                           onClick={this.toggle}>Add</Button>\r\n                                </CardTitle>\r\n                                <DataTradesTable\r\n                                    activePage={this.state.activePage}\r\n                                    displayLength={this.state.displayLength}\r\n                                    total={this.state.translations.length}\r\n                                    onChangePage={this.handleChangePage}\r\n                                    onChangeLength={this.handleChangeLength}\r\n                                    data={data}\r\n                                    loading={this.state.spinning}\r\n                                >\r\n                                    <Column width={100} fixed align=\"center\">\r\n                                        <HeaderCell>No</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <span>{rowIndex + 1}</span>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                    <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                        <HeaderCell>Name</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <span>{rowData.language? rowData.language.name : rowData.language_id}</span>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                    <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                        <HeaderCell>Actions</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <div>\r\n                                                    <Button color=\"secondary\" size=\"xs\" className=\"mb-2\" onClick={()=>this.toggle(rowData)}>\r\n                                                        <IntlMessages id=\"edit\"/>\r\n                                                    </Button>\r\n                                                    {\" \"}{\" \"}\r\n                                                    <Button color=\"danger\" size=\"xs\" className=\"mb-2\"\r\n                                                        onClick={() => this.deleteTranslation(rowData.id)}\r\n                                                    >\r\n                                                        <IntlMessages id=\"delete\"/>\r\n                                                    </Button>\r\n                                                </div>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                </DataTradesTable>\r\n                                {this.state.showModal &&\r\n                                <TranslationsModal\r\n                                    showModal={this.state.showModal}\r\n                                    toggle={this.toggle}\r\n                                    languages={this.state.languages}\r\n                                    handleSelectLanguage={this.handleSelectLanguage}\r\n                                    selectedLanguage={this.state.selectedLanguage}\r\n                                    handleResultInputChange={this.handleResultInputChange}\r\n                                    heading={this.state.heading}\r\n                                    subTitle={this.state.subTitle}\r\n                                    total={this.state.total}\r\n                                    rows={this.state.rows}\r\n                                    addResultList={this.AddResultList}\r\n                                    translationContent={this.state.translationContent}\r\n                                    storeTranslation={this.storeTranslation}\r\n                                    updateTranslation={this.updateTranslation}\r\n                                    loadingApi={this.state.loadingApi}\r\n                                    modalMethod={this.state.modalMethod}\r\n                                />\r\n                                }\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Fragment} from 'react';\r\nimport {Table} from \"rsuite\";\r\nimport '../../views/app/table.css';\r\n\r\nconst {Pagination} = Table;\r\nconst DataTradesTable = ({\r\n                             activePage,\r\n                             displayLength,\r\n                             total,\r\n                             onChangePage,\r\n                             onChangeLength,\r\n                             data,\r\n                             loading,\r\n                             children\r\n                         }) => {\r\n    return (\r\n        <Fragment>\r\n            <Table autoHeight={true}\r\n                   data={data}\r\n                   bordered\r\n                   cellBordered\r\n                   virtualized={false}\r\n                   hover={true}\r\n                   loading={loading}\r\n                   shouldUpdateScroll>\r\n                {children}\r\n            </Table>\r\n            {onChangePage && <Pagination\r\n                lengthMenu={[\r\n                    {\r\n                        value: 25,\r\n                        label: 25\r\n                    },\r\n                    {\r\n                        value: 35,\r\n                        label: 35\r\n                    }\r\n                ]}\r\n                activePage={activePage}\r\n                displayLength={displayLength}\r\n                total={total}\r\n                onChangePage={onChangePage}\r\n                onChangeLength={onChangeLength}\r\n            />}\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default DataTradesTable;\r\n","import React, {Fragment, useEffect} from \"react\";\r\nimport {Button, FormGroup, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {Colxx} from \"../../../components/common/CustomBootstrap\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport VideoUploader from \"../../../components/VideoUploader\";\r\nimport Url from \"../../../config/api\";\r\n\r\nconst quillModules = {\r\n    toolbar: [\r\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n        [\r\n            {list: \"ordered\"},\r\n            {list: \"bullet\"},\r\n            {indent: \"-1\"},\r\n            {indent: \"+1\"}\r\n        ],\r\n        [\"link\", \"image\"],\r\n        [\"clean\"]\r\n    ]\r\n};\r\nconst quillFormats = [\r\n    \"header\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"blockquote\",\r\n    \"list\",\r\n    \"bullet\",\r\n    \"indent\",\r\n    \"link\",\r\n    \"image\"\r\n];\r\nconst TranslationsModal = ({\r\n                               showModal, toggle, languages, handleSelectLanguage, selectedLanguage,\r\n                               handleChangeTranslationContent, translationContent, loadingApi,\r\n                               storeTranslation, updateTranslation, modalMethod, handleInputChange,\r\n                               handleGuidesInputChange, question, answer, title, paragraph,\r\n                               handleChangeParagraph, handleCategoryInputChange, categoryName,\r\n                               handleResultInputChange, heading, subTitle, total, addResultList,\r\n                               handleChangeChatMessage, message,\r\n                               onHomeVideoComplete,\r\n                               onCourseVideoComplete,\r\n                               entityId,\r\n                               storeEmailTemplates,\r\n                               handleChangeEmailTranslationContent\r\n                           }) => {\r\n    return (\r\n        <Modal isOpen={showModal} toggle={toggle} size='lg'>\r\n            <ModalHeader toggle={toggle}>\r\n                {modalMethod === 'store' ? \"Store Translation\" : 'Update Translation'}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                <div className=\"react-modal-custom-overflow p-2\">\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Language</label>\r\n                        <select\r\n                            name=\"select\"\r\n                            className=\"form-control\"\r\n                            value={selectedLanguage}\r\n                            onChange={handleSelectLanguage}\r\n                            placeholder='Please Select Language..'\r\n                        >\r\n                            <option value={null}>Please Select Language</option>\r\n                            {languages.map(item => (\r\n                                <option key={item.id} value={item.id}>{item.name}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                    </Colxx>\r\n                </FormGroup>\r\n                {handleChangeTranslationContent &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Content</label>\r\n                        <ReactQuill\r\n                            theme=\"snow\"\r\n                            value={translationContent}\r\n                            onChange={handleChangeTranslationContent}\r\n                            modules={quillModules}\r\n                            formats={quillFormats}/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {handleChangeEmailTranslationContent &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Content</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={translationContent}\r\n                                onChange={handleChangeEmailTranslationContent}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    }\r\n                {handleInputChange && <div>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Question</label>\r\n                            <Input type=\"text\" value={question} onChange={handleInputChange} name=\"question\"\r\n                                   placeholder={'Question *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Answer</label>\r\n                            <Input type=\"textarea\" rows='5' value={answer} onChange={handleInputChange} name=\"answer\"\r\n                                   placeholder={'Answer *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </div>}\r\n                {handleGuidesInputChange &&\r\n                <Fragment>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Title</label>\r\n                            <Input type=\"text\" value={title} onChange={handleGuidesInputChange} name=\"title\"\r\n                                   placeholder={'Title *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Paragraph</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={paragraph}\r\n                                onChange={handleChangeParagraph}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </Fragment>}\r\n                {handleCategoryInputChange &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Name</label>\r\n                            <Input type=\"text\"\r\n                                   value={categoryName}\r\n                                   onChange={handleCategoryInputChange}\r\n                                   name=\"categoryName\"\r\n                                   placeholder={'Name *'}\r\n                                   required\r\n                            />\r\n                        </Colxx>\r\n                    </FormGroup>}\r\n                    {handleResultInputChange &&\r\n                        <Fragment>\r\n\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Heading </label>\r\n                                        <Input type=\"text\"\r\n                                               value={heading}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"heading\"\r\n                                               placeholder={'Heading *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Subtitle </label>\r\n                                        <Input type=\"text\"\r\n                                               value={subTitle}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"subTitle\"\r\n                                               placeholder={'Subtitle *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                            <FormGroup row>\r\n                                <Colxx sm=\"12\">\r\n                                    <label> Total </label>\r\n                                    <Input type=\"text\"\r\n                                           value={total}\r\n                                           onChange={handleResultInputChange}\r\n                                           name=\"total\"\r\n                                           placeholder={'Total *'}\r\n                                           required\r\n                                    />\r\n                                </Colxx>\r\n                            </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Rows </label>\r\n                                        {addResultList()}\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                        </Fragment>\r\n                  }\r\n                {handleChangeChatMessage &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Message</label>\r\n                        <Input type=\"textarea\" rows='5' value={message} onChange={handleChangeChatMessage} name=\"message\"\r\n                               placeholder={'Message *'} required/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {(onHomeVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                        <div className='upload_wrapper mt-5'>\r\n                            <div className=\"lead\">\r\n                                Please Upload Home Video Translation\r\n                            </div>\r\n                            <hr/>\r\n                            {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 200MB</span>\r\n                            <hr/>\r\n                            <VideoUploader\r\n                                uploadUrl={`${Url.UPLOAD_HOME_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                                isMulti={false}\r\n                                chunkSize={200000000}\r\n                                onUploadComplete={onHomeVideoComplete}\r\n                            />\r\n\r\n                        </div>\r\n                    // </FormGroup>\r\n                    }\r\n                    {(onCourseVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                    <div className='upload_wrapper mt-5'>\r\n                        <div className=\"lead\">\r\n                            Please Upload Course Video Translation\r\n                        </div>\r\n                        <hr/>\r\n                        {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 30MB</span>\r\n                        <hr/>\r\n                        <VideoUploader\r\n                            uploadUrl={`${Url.UPLOAD_COURSE_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                            isMulti={false}\r\n                            chunkSize={200000000}\r\n                            onUploadComplete={onCourseVideoComplete}\r\n                        />\r\n\r\n                    </div>\r\n                        // </FormGroup>\r\n                    }\r\n                </div>\r\n            </ModalBody>\r\n            {!entityId &&\r\n            <ModalFooter>\r\n                {modalMethod === 'store' ?\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={storeTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Store\r\n                </span>\r\n                    </Button> :\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={updateTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Update\r\n                </span>\r\n                    </Button>}\r\n            </ModalFooter>\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n}\r\nexport default TranslationsModal;","import React, {Component} from \"react\";\r\nimport {UploaderComponent} from '@syncfusion/ej2-react-inputs';\r\n// import './index.css'\r\nimport {isNullOrUndefined} from '@syncfusion/ej2-base';\r\nexport default class VideoUploader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.value = 0;\r\n        this.ddlDatas = [\r\n            {value: 500000, size: '500 KB'},\r\n            {value: 1000000, size: '1 MB'},\r\n            {value: 2000000, size: '2 MB'}\r\n        ];\r\n        this.fields = {text: 'size', value: 'value'};\r\n        this.isInteraction = false;\r\n        this.asyncSettings = {\r\n            saveUrl: props.uploadUrl,\r\n            // removeUrl: 'https://ej2.syncfusion.com/services/api/uploadbox/Remove',\r\n            chunkSize: props.chunkSize? props.chunkSize : 20000000\r\n        };\r\n        this.autoUpload = false;\r\n    }\r\n\r\n    onChange = (args) => {\r\n        this.uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.value, 10);\r\n    }\r\n\r\n    onRemoveFile = (args) => {\r\n        args.postRawFile = false;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onPausing = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onResuming = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\r\n    onBeforeFailure = (args) => {\r\n        let proxy = this;\r\n        args.cancel = !this.isInteraction;\r\n        // interval to check network availability on every 500 milliseconds\r\n        let clearTimeInterval = setInterval(function () {\r\n            if (navigator.onLine && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 4) {\r\n                proxy.uploadObj.resume(proxy.uploadObj.filesData);\r\n                clearSetInterval();\r\n            } else {\r\n                if (!proxy.isInteraction && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 3) {\r\n                    proxy.uploadObj.pause(proxy.uploadObj.filesData);\r\n                }\r\n            }\r\n        }, 500);\r\n\r\n        // clear Interval after when network is available.\r\n      const clearSetInterval = () => {\r\n            clearInterval(clearTimeInterval);\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <UploaderComponent\r\n                minFileSize = {10000}\r\n                maxFileSize= {200000000}\r\n                id='file'\r\n                type='file'\r\n                multiple={this.props.isMulti}\r\n                ref={(scope) => {this.uploadObj = scope;}}\r\n                asyncSettings={this.asyncSettings}\r\n                actionComplete={this.props.onUploadComplete}\r\n                autoUpload={this.autoUpload}\r\n                allowedExtensions=\"video/*\"\r\n                removing={this.onRemoveFile}\r\n                pausing={this.onPausing}\r\n                // uploading={() => (alert(\"HI\"))}\r\n                // template={this.template}\r\n                resuming={this.onResuming}\r\n                chunkFailure={this.onBeforeFailure}\r\n            />\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}