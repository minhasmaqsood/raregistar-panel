{"version":3,"sources":["views/app/result/edit.js","../node_modules/reactstrap/es/Form.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/reactstrap/es/Label.js"],"names":["initialState","rows","heading","subTitle","total","id","loading","spinning","UpdateResult","props","getSingleResultData","a","_isUnmounted","ApiCall","Url","RESULT_EDIT","match","params","config","get","response","status","setState","data","result","details","sub_heading","updateResult","e","preventDefault","state","RESULT_UPDATE","post","history","push","NotificationManager","success","handleInputChange","target","name","value","handleAttributeChange","isActive","checked","handleRowsAttributeChange","event","index","position","action","removeRowClick","splice","addRowsInput","prevState","AddResultList","map","el","key","xs","sm","type","onChange","placeholder","required","className","color","size","onClick","this","xxs","to","onSubmit","row","disabled","Component","propTypes","children","PropTypes","node","inline","bool","tag","tagPropType","innerRef","oneOfType","object","func","string","cssModule","Form","_Component","_this","call","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","prototype","ref","render","_this$props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","stringOrNumberProp","number","columnProps","shape","order","offset","hidden","check","for","md","lg","xl","widths","array","getColumnSizeClass","isXs","colWidth","colSize","Label","htmlFor","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","length"],"mappings":"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","file":"static/js/109.40f2d680.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport {Row, Col} from \"reactstrap\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardTitle,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    Form,\r\n    Input\r\n} from \"reactstrap\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport ApiCall from '../../../config/network';\r\nimport Url from '../../../config/api';\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport {config} from \"../../../config/env\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst initialState = {\r\n    rows: [],\r\n    heading: '',\r\n    subTitle: '',\r\n    total: '',\r\n    id: null,\r\n    loading: false,\r\n    spinning: true\r\n}\r\nexport default class UpdateResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = initialState;\r\n    };\r\n    componentDidMount() {\r\n        this._isUnmounted = false\r\n        // this.getSingleResultData();\r\n    }\r\n    getSingleResultData = async () => {\r\n        if(!this._isUnmounted){\r\n            let response = await ApiCall.get(`${Url.RESULT_EDIT}/${this.props.match.params.id}`, await config());\r\n            // console.log(response)\r\n            if(response.status === 200){\r\n                this.setState({\r\n                    rows: response.data.result.details,\r\n                    heading: response.data.result.heading,\r\n                    subTitle: response.data.result.sub_heading,\r\n                    total: response.data.result.total,\r\n                    id: response.data.result.id,\r\n                    spinning: false\r\n                })\r\n            }\r\n        }\r\n    }\r\ncomponentWillUnmount() {\r\n        this._isUnmounted = true\r\n}\r\n\r\n    updateResult = async (e)=> {\r\n        e.preventDefault();\r\n\r\n        const { rows, heading, subTitle, total, id } = this.state;\r\n        this.setState({loading: true});\r\n        let response = await ApiCall.post(Url.RESULT_UPDATE, {\r\n            id: id,\r\n            details: rows,\r\n            heading: heading,\r\n            sub_heading: subTitle,\r\n            total: total,\r\n        }, await config());\r\n        if(response.status === 200){\r\n            this.setState(initialState);\r\n            this.props.history.push('/app/results/view')\r\n            return  NotificationManager.success(\r\n                \"Result Update Successfully\",\r\n                \"Success\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }else {\r\n            this.setState({loading: false});\r\n        }\r\n    };\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    handleAttributeChange = (e) => {\r\n        this.setState({\r\n            isActive: e.target.checked\r\n        })\r\n    }\r\n\r\n    handleRowsAttributeChange = (event, index) => {\r\n        if(event.target.name === 'position'){\r\n            let rows = this.state.rows;\r\n            rows[index].position = event.target.value;\r\n            this.setState({ rows })\r\n        }\r\n        if(event.target.name === 'action'){\r\n            let rows = this.state.rows;\r\n            rows[index].action = event.target.value;\r\n            this.setState({ rows })\r\n        }\r\n        if(event.target.name === \"isActive\"){\r\n            let rows = this.state.rows;\r\n            rows[index].isActive = event.target.checked;\r\n            this.setState({ rows })\r\n        }\r\n    };\r\n\r\n    removeRowClick =(index) => {\r\n        let rows = [...this.state.rows];\r\n        rows.splice(index, 1);\r\n        this.setState({rows});\r\n    };\r\n\r\n    addRowsInput =() => {\r\n        let rows = {'position':'',\r\n            // 'action': '', 'isActive': true\r\n        };\r\n        this.setState(prevState => ({rows: [...prevState.rows, rows]}));\r\n    };\r\n\r\n    AddResultList = () => {\r\n        return this.state.rows.map((el, index) => (\r\n            <div key={index}>\r\n                <Row>\r\n                    <Col xs='10'>\r\n                        <FormGroup>\r\n                            <Colxx sm=\"12\">\r\n                                <Input type=\"text\" value={this.state.rows[index].position} onChange={(e) => this.handleRowsAttributeChange(e, index)} name=\"position\" placeholder={'Position *'} required/>\r\n                            </Colxx>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    {/*<Col xs='10'>*/}\r\n                    {/*    <FormGroup>*/}\r\n                    {/*        <Colxx sm=\"12\">*/}\r\n                    {/*            <Input type=\"text\" value={this.state.rows[index].action} onChange={(e) => this.handleRowsAttributeChange(e, index)} name=\"action\" placeholder={'Action *'} required/>*/}\r\n                    {/*        </Colxx>*/}\r\n                    {/*    </FormGroup>*/}\r\n                    {/*</Col>*/}\r\n                    {/*<Col xs='10'>*/}\r\n                    {/*    <FormGroup>*/}\r\n                    {/*        <Colxx sm=\"12\">*/}\r\n                    {/*            <CustomInput*/}\r\n                    {/*                type=\"checkbox\"*/}\r\n                    {/*                key={index}*/}\r\n                    {/*                name='isActive'*/}\r\n                    {/*                checked={this.state.rows[index].isActive}*/}\r\n                    {/*                onChange={(e) => this.handleRowsAttributeChange(e, index)}*/}\r\n                    {/*                id={index}*/}\r\n                    {/*                label={'isActive'}*/}\r\n                    {/*            />*/}\r\n                    {/*        </Colxx>*/}\r\n                    {/*    </FormGroup>*/}\r\n                    {/*</Col>*/}\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"form-group\">\r\n                            <Button\r\n                                color='danger'\r\n                                size={'sm'}\r\n                                onClick={() => {\r\n                                    this.removeRowClick(index);\r\n                                }}\r\n                            >\r\n                                Remove\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n                {/*<hr />*/}\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    render() {\r\n        const {heading, subTitle, total, spinning} = this.state;\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n                        <div className=\"text-zero top-right-button-container\">\r\n                            <Link to='/app/results/view'><Button size='lg' color={'secondary'}><IntlMessages id={\"menu.cancel\"} /></Button></Link>\r\n                        </div>\r\n                        <Breadcrumb heading=\"menu.edit\" match={this.props.match} />\r\n                        <Separator className=\"mb-5\" />\r\n                    </Colxx>\r\n                </Row>\r\n                {spinning? <div className='loading'/> :\r\n                    <Row>\r\n                        <Col xxs=\"10\">\r\n                            <div className='col-sm-12 col-lg-10 col-xs-12 '>\r\n                                <Card>\r\n                                    <div className=\"position-absolute card-top-buttons\">\r\n                                    </div>\r\n                                    <CardBody>\r\n                                        <CardTitle>\r\n                                            <IntlMessages id=\"updateResult\" />\r\n                                        </CardTitle>\r\n                                        <Form className=\"dashboard-quick-post\" onSubmit={this.updateResult}>\r\n                                            <FormGroup row>\r\n                                                <Label sm=\"3\">\r\n                                                    <IntlMessages id=\"heading\" />*\r\n                                                </Label>\r\n                                                <Colxx sm=\"9\">\r\n                                                    <Input type=\"text\" value={heading} onChange={this.handleInputChange} name=\"heading\" placeholder={'Heading *'} required/>\r\n                                                </Colxx>\r\n                                            </FormGroup>\r\n                                            <FormGroup row>\r\n                                                <Label sm=\"3\">\r\n                                                    <IntlMessages id=\"subTitle\" />*\r\n                                                </Label>\r\n                                                <Colxx sm=\"9\">\r\n                                                    <Input type=\"text\" value={subTitle} onChange={this.handleInputChange} name=\"subTitle\" placeholder={'Sub Title *'} required/>\r\n                                                </Colxx>\r\n                                            </FormGroup>\r\n                                            <FormGroup row>\r\n                                                <Label  sm=\"3\">\r\n                                                    <IntlMessages id=\"rows\" />*\r\n                                                </Label>\r\n                                                <Colxx sm=\"9\">\r\n                                                    {this.AddResultList()}\r\n                                                    <button\r\n                                                        type=\"button\"\r\n                                                        className=\"btn btn-primary\"\r\n                                                        onClick={() => this.addRowsInput()}\r\n                                                    >\r\n                                                        <IntlMessages id=\"addNew\"/>\r\n                                                    </button>\r\n                                                </Colxx>\r\n                                            </FormGroup>\r\n                                            <FormGroup row>\r\n                                                <Label sm=\"3\">\r\n                                                    <IntlMessages id=\"total\" />*\r\n                                                </Label>\r\n                                                <Colxx sm=\"9\">\r\n                                                    <Input type=\"text\" value={total} onChange={this.handleInputChange} name=\"total\" placeholder={'Total *'} required/>\r\n                                                </Colxx>\r\n                                            </FormGroup>\r\n                                            <Button className={`float-right btn-shadow btn-multiple-state ${this.state.loading ? \"show-spinner\" : \"\"}`} color=\"primary\" disabled={this.state.loading}>\r\n                                        <span className=\"spinner d-inline-block\">\r\n                          <span className=\"bounce1\" />\r\n                          <span className=\"bounce2\" />\r\n                          <span className=\"bounce3\" />\r\n                        </span>\r\n                                                <span className=\"label\"><IntlMessages id=\"update\" /></span>\r\n                                            </Button>\r\n                                        </Form>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;"],"sourceRoot":""}