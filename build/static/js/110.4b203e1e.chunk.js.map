{"version":3,"sources":["views/app/guides/translations.js","components/DataTradesTable/index.js","views/app/settings/trasnlations-modal.js","components/VideoUploader/index.js"],"names":["Column","Table","HeaderCell","Cell","Translations","getAllGuides","a","setState","spinning","guideId","parseInt","props","match","params","id","_isMounted","ApiCall","Url","ALL_GUIDES","config","get","response","status","translations","data","guides","filter","item","length","faqs","languages","handleGuidesInputChange","e","target","name","value","handleChangeParagraph","paragraph","handleChangeContent","content","handleChangePage","dataKey","page","handleChangeLength","displayLength","getData","state","v","i","start","handleSelectLanguage","selectedLanguage","toggle","showModal","title","body","language","modalMethod","translationId","storeTranslation","validation","handleValidation","loadingApi","STORE_GUIDES_TRANSLATIONS","language_id","entity_id","post","NotificationManager","success","error","message","updateTranslation","UPDATE_GUIDES_TRANSLATIONS","languageValidation","paragraphValidation","deleteTranslation","confirmAlert","buttons","label","onClick","confirmDeleteTranslation","DELETE_TRANSLATION","loading","entityId","this","xxs","className","to","size","color","heading","activePage","total","onChangePage","onChangeLength","width","fixed","align","rowData","rowIndex","minWidth","flexGrow","translationContent","Component","Pagination","DataTradesTable","children","autoHeight","bordered","cellBordered","virtualized","hover","shouldUpdateScroll","lengthMenu","quillModules","toolbar","list","indent","quillFormats","TranslationsModal","handleChangeTranslationContent","handleInputChange","question","answer","handleCategoryInputChange","categoryName","handleResultInputChange","subTitle","addResultList","handleChangeChatMessage","onHomeVideoComplete","onCourseVideoComplete","handleChangeEmailTranslationContent","storeEmailTemplates","isOpen","row","sm","onChange","placeholder","map","key","theme","modules","formats","type","required","rows","uploadUrl","UPLOAD_HOME_VIDEO_TRANSLATION","isMulti","chunkSize","onUploadComplete","UPLOAD_COURSE_VIDEO_TRANSLATION","disabled","VideoUploader","args","uploadObj","asyncSettings","itemData","onRemoveFile","postRawFile","onPausing","isInteraction","event","navigator","onLine","onResuming","onBeforeFailure","proxy","cancel","clearTimeInterval","setInterval","isNullOrUndefined","filesData","statusCode","resume","clearSetInterval","pause","clearInterval","ddlDatas","fields","text","saveUrl","autoUpload","minFileSize","maxFileSize","multiple","ref","scope","actionComplete","allowedExtensions","removing","pausing","resuming","chunkFailure"],"mappings":"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","file":"static/js/110.4b203e1e.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport {Row, Col, CardBody, CardTitle,  Card, Button, } from \"reactstrap\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport ApiCall from '../../../config/network';\r\nimport Url from '../../../config/api';\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport {config} from \"../../../config/env\";\r\n// import { confirmAlert } from 'react-confirm-alert';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Table} from \"rsuite\";\r\nimport '../table.css';\r\nimport DataTradesTable from \"../../../components/DataTradesTable\";\r\nimport TranslationsModal from \"../settings/trasnlations-modal\";\r\nimport {confirmAlert} from \"react-confirm-alert\";\r\n\r\nconst { Column, HeaderCell, Cell,  } = Table;\r\n\r\nexport default class Translations extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            title: '',\r\n            paragraph: '',\r\n            loading: false,\r\n            languages: [],\r\n            entityId: '',\r\n            translations: [],\r\n            spinning: true,\r\n            selectedLanguage: '',\r\n            translationId: null,\r\n            modalMethod: '',\r\n            loadingApi: false,\r\n            showModal: false,\r\n            //Pagination\r\n            displayLength: 10,\r\n            page: 1\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this._isMounted = false\r\n        this.getAllGuides();\r\n    };\r\n    getAllGuides = async ()=> {\r\n        this.setState({spinning: true});\r\n        const guideId = parseInt(this.props.match.params.id)\r\n        if(!this._isMounted){\r\n            let response = await ApiCall.get(Url.ALL_GUIDES, await config())\r\n            if(response.status=== 200){\r\n                const translations =\r\n                    response.data.guides.filter(item => item.id === guideId).length> 0?\r\n                        response.data.guides.filter(item => item.id === guideId)[0].translations : []\r\n                this.setState({\r\n                    faqs: response.data.guides,\r\n                    languages: response.data.languages,\r\n                    translations,\r\n                    spinning: false\r\n                });\r\n            }\r\n        }\r\n\r\n    };\r\n    componentWillUnmount() {\r\n        this._isMounted = true\r\n    }\r\n    handleGuidesInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    handleChangeParagraph = (paragraph) => {\r\n        this.setState({paragraph});\r\n    };\r\n    handleChangeContent = (content) => {\r\n        this.setState({content});\r\n    };\r\n    handleChangePage = (dataKey) => {\r\n        this.setState({\r\n            page: dataKey\r\n        });\r\n    };\r\n    handleChangeLength = (dataKey) => {\r\n        this.setState({\r\n            page: 1,\r\n            displayLength: dataKey\r\n        });\r\n    };\r\n    getData = () => {\r\n        const {displayLength, page, translations} = this.state;\r\n        return translations.filter((v, i) => {\r\n            const start = displayLength * (page - 1);\r\n            const end = start + displayLength;\r\n            return i >= start && i < end;\r\n        });\r\n    };\r\n    handleSelectLanguage = (e) => {\r\n        this.setState({\r\n            selectedLanguage: e.target.value\r\n        })\r\n    };\r\n    toggle = (item) => {\r\n        this.setState({\r\n            showModal: !this.state.showModal\r\n        })\r\n        if (item.id) {\r\n            this.setState({\r\n                title: item.body[0].title,\r\n                paragraph: item.body[0].paragraph,\r\n                selectedLanguage: item.language.id,\r\n                modalMethod: 'update',\r\n                translationId: item.id\r\n            })\r\n        }else {\r\n            this.setState({\r\n                title: '',\r\n                paragraph: '',\r\n                selectedLanguage: '',\r\n                modalMethod: 'store'\r\n            })\r\n        }\r\n    };\r\n    storeTranslation = async () => {\r\n        const {selectedLanguage, title, paragraph} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.STORE_GUIDES_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  this.props.match.params.id,\r\n                title,\r\n                paragraph\r\n            }, await config())\r\n            if(response.status === 200){\r\n\r\n                this.setState({\r\n                    showModal: false,\r\n                    title: '',\r\n                    paragraph: '',\r\n                    loadingApi: false\r\n                })\r\n                this.getAllGuides();\r\n                return NotificationManager.success(\r\n                    \"Translation Stored Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    updateTranslation = async () => {\r\n        const {selectedLanguage,  translationId, title, paragraph} = this.state;\r\n        let validation = this.handleValidation();\r\n        if(validation.status){\r\n            this.setState({loadingApi: true})\r\n            let response = await ApiCall.post(Url.UPDATE_GUIDES_TRANSLATIONS, {\r\n                language_id: selectedLanguage,\r\n                entity_id:  this.props.match.params.id,\r\n                title, paragraph,\r\n                id: translationId\r\n            }, await config())\r\n            if(response.status === 200){\r\n\r\n                this.setState({\r\n                    title: '',\r\n                    paragraph: '',\r\n                    showModal: false,\r\n                    loadingApi: false\r\n                })\r\n                this.getAllGuides();\r\n                return NotificationManager.success(\r\n                    \"Translation Updated Successfully\",\r\n                    \"Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    'filled'\r\n                );\r\n            }else {\r\n                this.setState({\r\n                    loadingApi: false\r\n                })\r\n            }\r\n        }else {\r\n            return NotificationManager.error(\r\n                validation.message,\r\n                \"Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    handleValidation = () => {\r\n        const {selectedLanguage, title, paragraph} = this.state;\r\n        let languageValidation = {\r\n            message: 'Please Select Language',\r\n            status: false\r\n        };\r\n        let titleValidation = {\r\n            message: 'Please write title',\r\n            status: false\r\n        };\r\n        let paragraphValidation = {\r\n            message: 'Please write paragraph',\r\n            status: false\r\n        };\r\n        let passed = {\r\n            status: true\r\n        };\r\n        return selectedLanguage !== null?\r\n            selectedLanguage === \"\"? languageValidation :\r\n                selectedLanguage === \"Please Select Language\"? languageValidation :\r\n                    title === \"\"? titleValidation :\r\n                        paragraph === \"\"? paragraphValidation :\r\n                        paragraph === \"<p><br></p>\"? paragraphValidation :\r\n                            passed\r\n            : languageValidation\r\n\r\n    };\r\n    deleteTranslation  =  (item) => {\r\n        confirmAlert({\r\n            title: 'Confirmation!',\r\n            message: 'Are you sure you want to Delete This Translation?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: () => this.confirmDeleteTranslation(item)\r\n                },\r\n                {\r\n                    label: \"No\",\r\n                }\r\n            ]\r\n        })\r\n    };\r\n    confirmDeleteTranslation = async (id) => {\r\n        let response = await ApiCall.post(Url.DELETE_TRANSLATION, {\r\n            id: id,\r\n        }, await config());\r\n        if(response.status === 200){\r\n            this.getAllGuides();\r\n            return  NotificationManager.success(\r\n                \"Translation deleted Successfully\",\r\n                \"Success\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }\r\n    };\r\n    render() {\r\n        const data = this.getData()\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n\r\n                        <div className=\"text-zero top-right-button-container\">\r\n                            <Link to='/app/guides'><Button size='lg' color={'secondary'}>Go Back</Button></Link>\r\n                        </div>\r\n                        <Breadcrumb heading=\"faq.view\" match={this.props.match} />\r\n                        <Separator className=\"mb-5\" />\r\n                    </Colxx>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"h-100\">\r\n                            <CardBody>\r\n                                {/*<div className='d-flex justify-content-left align-items-center mb-5'>*/}\r\n                                {/*    Question:*/}\r\n                                {/*</div>*/}\r\n                                <CardTitle>\r\n                                    Translations | <Button size='xs' color='primary'\r\n                                                           onClick={this.toggle}>Add</Button>\r\n                                </CardTitle>\r\n                                <DataTradesTable\r\n                                    activePage={this.state.activePage}\r\n                                    displayLength={this.state.displayLength}\r\n                                    total={this.state.translations.length}\r\n                                    onChangePage={this.handleChangePage}\r\n                                    onChangeLength={this.handleChangeLength}\r\n                                    data={data}\r\n                                    loading={this.state.spinning}\r\n                                >\r\n                                    <Column width={100} fixed align=\"center\">\r\n                                        <HeaderCell>No</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <span>{rowIndex + 1}</span>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                    <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                        <HeaderCell>Name</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <span>{rowData.language.name}</span>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                    <Column minWidth={200} flexGrow={1} align=\"center\">\r\n                                        <HeaderCell>Actions</HeaderCell>\r\n                                        <Cell>\r\n                                            {(rowData, rowIndex) => {\r\n                                                return <div>\r\n                                                    <Button color=\"secondary\" size=\"xs\" className=\"mb-2\" onClick={()=>this.toggle(rowData)}>\r\n                                                        <IntlMessages id=\"edit\"/>\r\n                                                    </Button>\r\n                                                    {\" \"}{\" \"}\r\n                                                    <Button color=\"danger\" size=\"xs\" className=\"mb-2\"\r\n                                                        onClick={() => this.deleteTranslation(rowData.id)}\r\n                                                    >\r\n                                                        <IntlMessages id=\"delete\"/>\r\n                                                    </Button>\r\n                                                </div>\r\n                                            }}\r\n                                        </Cell>\r\n                                    </Column>\r\n                                </DataTradesTable>\r\n                                {this.state.showModal &&\r\n                                <TranslationsModal\r\n                                    showModal={this.state.showModal}\r\n                                    toggle={this.toggle}\r\n                                    languages={this.state.languages}\r\n                                    handleSelectLanguage={this.handleSelectLanguage}\r\n                                    selectedLanguage={this.state.selectedLanguage}\r\n                                    handleGuidesInputChange={this.handleGuidesInputChange}\r\n                                    handleChangeParagraph={this.handleChangeParagraph}\r\n                                    title={this.state.title}\r\n                                    paragraph={this.state.paragraph}\r\n                                    translationContent={this.state.translationContent}\r\n                                    storeTranslation={this.storeTranslation}\r\n                                    updateTranslation={this.updateTranslation}\r\n                                    loadingApi={this.state.loadingApi}\r\n                                    modalMethod={this.state.modalMethod}\r\n                                />\r\n                                }\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Fragment} from 'react';\r\nimport {Table} from \"rsuite\";\r\nimport '../../views/app/table.css';\r\n\r\nconst {Pagination} = Table;\r\nconst DataTradesTable = ({\r\n                             activePage,\r\n                             displayLength,\r\n                             total,\r\n                             onChangePage,\r\n                             onChangeLength,\r\n                             data,\r\n                             loading,\r\n                             children\r\n                         }) => {\r\n    return (\r\n        <Fragment>\r\n            <Table autoHeight={true}\r\n                   data={data}\r\n                   bordered\r\n                   cellBordered\r\n                   virtualized={false}\r\n                   hover={true}\r\n                   loading={loading}\r\n                   shouldUpdateScroll>\r\n                {children}\r\n            </Table>\r\n            {onChangePage && <Pagination\r\n                lengthMenu={[\r\n                    {\r\n                        value: 25,\r\n                        label: 25\r\n                    },\r\n                    {\r\n                        value: 35,\r\n                        label: 35\r\n                    }\r\n                ]}\r\n                activePage={activePage}\r\n                displayLength={displayLength}\r\n                total={total}\r\n                onChangePage={onChangePage}\r\n                onChangeLength={onChangeLength}\r\n            />}\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default DataTradesTable;\r\n","import React, {Fragment, useEffect} from \"react\";\r\nimport {Button, FormGroup, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {Colxx} from \"../../../components/common/CustomBootstrap\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport VideoUploader from \"../../../components/VideoUploader\";\r\nimport Url from \"../../../config/api\";\r\n\r\nconst quillModules = {\r\n    toolbar: [\r\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n        [\r\n            {list: \"ordered\"},\r\n            {list: \"bullet\"},\r\n            {indent: \"-1\"},\r\n            {indent: \"+1\"}\r\n        ],\r\n        [\"link\", \"image\"],\r\n        [\"clean\"]\r\n    ]\r\n};\r\nconst quillFormats = [\r\n    \"header\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"blockquote\",\r\n    \"list\",\r\n    \"bullet\",\r\n    \"indent\",\r\n    \"link\",\r\n    \"image\"\r\n];\r\nconst TranslationsModal = ({\r\n                               showModal, toggle, languages, handleSelectLanguage, selectedLanguage,\r\n                               handleChangeTranslationContent, translationContent, loadingApi,\r\n                               storeTranslation, updateTranslation, modalMethod, handleInputChange,\r\n                               handleGuidesInputChange, question, answer, title, paragraph,\r\n                               handleChangeParagraph, handleCategoryInputChange, categoryName,\r\n                               handleResultInputChange, heading, subTitle, total, addResultList,\r\n                               handleChangeChatMessage, message,\r\n                               onHomeVideoComplete,\r\n                               onCourseVideoComplete,\r\n                               entityId,\r\n                               storeEmailTemplates,\r\n                               handleChangeEmailTranslationContent\r\n                           }) => {\r\n    return (\r\n        <Modal isOpen={showModal} toggle={toggle} size='lg'>\r\n            <ModalHeader toggle={toggle}>\r\n                {modalMethod === 'store' ? \"Store Translation\" : 'Update Translation'}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                <div className=\"react-modal-custom-overflow p-2\">\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Language</label>\r\n                        <select\r\n                            name=\"select\"\r\n                            className=\"form-control\"\r\n                            value={selectedLanguage}\r\n                            onChange={handleSelectLanguage}\r\n                            placeholder='Please Select Language..'\r\n                        >\r\n                            <option value={null}>Please Select Language</option>\r\n                            {languages.map(item => (\r\n                                <option key={item.id} value={item.id}>{item.name}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                    </Colxx>\r\n                </FormGroup>\r\n                {handleChangeTranslationContent &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Content</label>\r\n                        <ReactQuill\r\n                            theme=\"snow\"\r\n                            value={translationContent}\r\n                            onChange={handleChangeTranslationContent}\r\n                            modules={quillModules}\r\n                            formats={quillFormats}/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {handleChangeEmailTranslationContent &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Content</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={translationContent}\r\n                                onChange={handleChangeEmailTranslationContent}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    }\r\n                {handleInputChange && <div>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Question</label>\r\n                            <Input type=\"text\" value={question} onChange={handleInputChange} name=\"question\"\r\n                                   placeholder={'Question *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Answer</label>\r\n                            <Input type=\"textarea\" rows='5' value={answer} onChange={handleInputChange} name=\"answer\"\r\n                                   placeholder={'Answer *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </div>}\r\n                {handleGuidesInputChange &&\r\n                <Fragment>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Title</label>\r\n                            <Input type=\"text\" value={title} onChange={handleGuidesInputChange} name=\"title\"\r\n                                   placeholder={'Title *'} required/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Paragraph</label>\r\n                            <ReactQuill\r\n                                theme=\"snow\"\r\n                                value={paragraph}\r\n                                onChange={handleChangeParagraph}\r\n                                modules={quillModules}\r\n                                formats={quillFormats}/>\r\n                        </Colxx>\r\n                    </FormGroup>\r\n                </Fragment>}\r\n                {handleCategoryInputChange &&\r\n                    <FormGroup row>\r\n                        <Colxx sm=\"12\">\r\n                            <label>Name</label>\r\n                            <Input type=\"text\"\r\n                                   value={categoryName}\r\n                                   onChange={handleCategoryInputChange}\r\n                                   name=\"categoryName\"\r\n                                   placeholder={'Name *'}\r\n                                   required\r\n                            />\r\n                        </Colxx>\r\n                    </FormGroup>}\r\n                    {handleResultInputChange &&\r\n                        <Fragment>\r\n\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Heading </label>\r\n                                        <Input type=\"text\"\r\n                                               value={heading}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"heading\"\r\n                                               placeholder={'Heading *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Subtitle </label>\r\n                                        <Input type=\"text\"\r\n                                               value={subTitle}\r\n                                               onChange={handleResultInputChange}\r\n                                               name=\"subTitle\"\r\n                                               placeholder={'Subtitle *'}\r\n                                               required\r\n                                        />\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                            <FormGroup row>\r\n                                <Colxx sm=\"12\">\r\n                                    <label> Total </label>\r\n                                    <Input type=\"text\"\r\n                                           value={total}\r\n                                           onChange={handleResultInputChange}\r\n                                           name=\"total\"\r\n                                           placeholder={'Total *'}\r\n                                           required\r\n                                    />\r\n                                </Colxx>\r\n                            </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Colxx sm=\"12\">\r\n                                        <label> Rows </label>\r\n                                        {addResultList()}\r\n                                    </Colxx>\r\n                                </FormGroup>\r\n                        </Fragment>\r\n                  }\r\n                {handleChangeChatMessage &&\r\n                <FormGroup row>\r\n                    <Colxx sm=\"12\">\r\n                        <label>Message</label>\r\n                        <Input type=\"textarea\" rows='5' value={message} onChange={handleChangeChatMessage} name=\"message\"\r\n                               placeholder={'Message *'} required/>\r\n                    </Colxx>\r\n                </FormGroup>}\r\n                    {(onHomeVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                        <div className='upload_wrapper mt-5'>\r\n                            <div className=\"lead\">\r\n                                Please Upload Home Video Translation\r\n                            </div>\r\n                            <hr/>\r\n                            {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 200MB</span>\r\n                            <hr/>\r\n                            <VideoUploader\r\n                                uploadUrl={`${Url.UPLOAD_HOME_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                                isMulti={false}\r\n                                chunkSize={200000000}\r\n                                onUploadComplete={onHomeVideoComplete}\r\n                            />\r\n\r\n                        </div>\r\n                    // </FormGroup>\r\n                    }\r\n                    {(onCourseVideoComplete && selectedLanguage) &&\r\n                    // <FormGroup row>\r\n                    <div className='upload_wrapper mt-5'>\r\n                        <div className=\"lead\">\r\n                            Please Upload Course Video Translation\r\n                        </div>\r\n                        <hr/>\r\n                        {\" \"} <span className=\"text-muted mt-2 mb-2\">Maximum File Size 30MB</span>\r\n                        <hr/>\r\n                        <VideoUploader\r\n                            uploadUrl={`${Url.UPLOAD_COURSE_VIDEO_TRANSLATION}/language/${selectedLanguage}/video/${entityId}`}\r\n                            isMulti={false}\r\n                            chunkSize={200000000}\r\n                            onUploadComplete={onCourseVideoComplete}\r\n                        />\r\n\r\n                    </div>\r\n                        // </FormGroup>\r\n                    }\r\n                </div>\r\n            </ModalBody>\r\n            {!entityId &&\r\n            <ModalFooter>\r\n                {modalMethod === 'store' ?\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={storeTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Store\r\n                </span>\r\n                    </Button> :\r\n                    <Button disabled={loadingApi}\r\n                            className={`float-right btn-shadow btn-multiple-state ${loadingApi ? \"show-spinner\" : \"\"}`}\r\n                            onClick={updateTranslation}\r\n                            color=\"primary\"\r\n                    >\r\n                                        <span className=\"spinner d-inline-block\">\r\n                                            <span className=\"bounce1\"/>\r\n                                            <span className=\"bounce2\"/>\r\n                                            <span className=\"bounce3\"/>\r\n                                        </span><span className=\"label\">\r\n                                               Update\r\n                </span>\r\n                    </Button>}\r\n            </ModalFooter>\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n}\r\nexport default TranslationsModal;","import React, {Component} from \"react\";\r\nimport {UploaderComponent} from '@syncfusion/ej2-react-inputs';\r\n// import './index.css'\r\nimport {isNullOrUndefined} from '@syncfusion/ej2-base';\r\nexport default class VideoUploader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.value = 0;\r\n        this.ddlDatas = [\r\n            {value: 500000, size: '500 KB'},\r\n            {value: 1000000, size: '1 MB'},\r\n            {value: 2000000, size: '2 MB'}\r\n        ];\r\n        this.fields = {text: 'size', value: 'value'};\r\n        this.isInteraction = false;\r\n        this.asyncSettings = {\r\n            saveUrl: props.uploadUrl,\r\n            // removeUrl: 'https://ej2.syncfusion.com/services/api/uploadbox/Remove',\r\n            chunkSize: props.chunkSize? props.chunkSize : 20000000\r\n        };\r\n        this.autoUpload = false;\r\n    }\r\n\r\n    onChange = (args) => {\r\n        this.uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.value, 10);\r\n    }\r\n\r\n    onRemoveFile = (args) => {\r\n        args.postRawFile = false;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onPausing = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to update flag variable value for automatic pause and resume\r\n    onResuming = (args) => {\r\n        this.isInteraction = args.event !== null && !navigator.onLine;\r\n    }\r\n\r\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\r\n    onBeforeFailure = (args) => {\r\n        let proxy = this;\r\n        args.cancel = !this.isInteraction;\r\n        // interval to check network availability on every 500 milliseconds\r\n        let clearTimeInterval = setInterval(function () {\r\n            if (navigator.onLine && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 4) {\r\n                proxy.uploadObj.resume(proxy.uploadObj.filesData);\r\n                clearSetInterval();\r\n            } else {\r\n                if (!proxy.isInteraction && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode === 3) {\r\n                    proxy.uploadObj.pause(proxy.uploadObj.filesData);\r\n                }\r\n            }\r\n        }, 500);\r\n\r\n        // clear Interval after when network is available.\r\n      const clearSetInterval = () => {\r\n            clearInterval(clearTimeInterval);\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <UploaderComponent\r\n                minFileSize = {10000}\r\n                maxFileSize= {200000000}\r\n                id='file'\r\n                type='file'\r\n                multiple={this.props.isMulti}\r\n                ref={(scope) => {this.uploadObj = scope;}}\r\n                asyncSettings={this.asyncSettings}\r\n                actionComplete={this.props.onUploadComplete}\r\n                autoUpload={this.autoUpload}\r\n                allowedExtensions=\"video/*\"\r\n                removing={this.onRemoveFile}\r\n                pausing={this.onPausing}\r\n                // uploading={() => (alert(\"HI\"))}\r\n                // template={this.template}\r\n                resuming={this.onResuming}\r\n                chunkFailure={this.onBeforeFailure}\r\n            />\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}