{"version":3,"sources":["containers/navs/Breadcrumb.js","components/applications/SurveyListItem.js","containers/applications/AddNewSurveyModal.js","containers/applications/SurveyApplicationMenu.js","views/app/applications/survey.js","components/common/CustomSelectInput.js","components/common/ApplicationMenu.js"],"names":["getMenuTitle","sub","id","getUrl","path","index","split","BreadcrumbItems","match","substr","paths","length","indexOf","filter","x","className","map","key","active","to","BreadcrumbContainer","heading","React","memo","item","handleCheckChange","isSelected","xxs","Card","CardBody","status","title","category","createDate","Badge","color","labelColor","pill","label","CustomInput","type","checked","onChange","event","AddNewSurveyModal","props","addNetItem","newItem","state","value","addSurveyItem","toggleModal","setState","this","surveyListApp","labels","categories","modalOpen","Modal","isOpen","toggle","wrapClassName","backdrop","ModalHeader","IntlMessages","ModalBody","Label","Input","defaultValue","target","components","CustomSelectInput","classNamePrefix","name","options","i","val","ModalFooter","Button","outline","onClick","Component","connect","SurveyApplicationMenu","column","getSurveyListWithFilter","surveyItems","allSurveyItems","loading","ApplicationMenu","suppressScrollX","wheelPropagation","NavItem","classnames","e","addFilter","c","defaultChecked","l","SurveyApp","toggleDisplayOptions","displayOptionsIsOpen","toggleSplit","prevState","dropdownSplitOpen","changeOrderBy","getSurveyListWithOrder","handleKeyPress","getSurveyListSearch","lastChecked","selectedItems","Object","assign","includes","push","selectedSurveyItemsChange","shiftKey","items","start","getIndex","end","slice","Math","min","max","Array","from","Set","handleChangeSelectAll","getSurveyList","arr","prop","searchKeyword","orderColumn","orderColumns","messages","intl","Row","size","ButtonDropdown","DropdownToggle","caret","DropdownMenu","right","DropdownItem","Breadcrumb","Collapse","UncontrolledDropdown","o","placeholder","onKeyPress","injectIntl","customProps","autoCorrect","autoCapitalize","params","handleDocumentClick","bind","container","ReactDOM","findDOMNode","contains","preventDefault","removeEvents","addEvents","forEach","document","addEventListener","removeEventListener","children"],"mappings":"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","file":"static/js/application-survey.c3a3fa62.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React from \"react\";\r\nimport { Card, CardBody, Badge, CustomInput } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { Colxx } from \"../common/CustomBootstrap\";\r\n\r\nconst SurveyListItem = ({ item, handleCheckChange, isSelected }) => {\r\n  return (\r\n    <Colxx xxs=\"12\">\r\n      <Card className=\"card d-flex flex-row mb-3\">\r\n        <div className=\"d-flex flex-grow-1 min-width-zero\">\r\n          <CardBody className=\"align-self-center d-flex flex-column flex-md-row justify-content-between min-width-zero align-items-md-center\">\r\n            <NavLink\r\n              to={`/app/applications/survey/${item.id}`}\r\n              className=\"list-item-heading mb-0 truncate w-40 w-xs-100  mb-1 mt-1\"\r\n            >\r\n              <i\r\n                className={`${\r\n                  item.status === \"COMPLETED\"\r\n                    ? \"simple-icon-check heading-icon\"\r\n                    : \"simple-icon-refresh heading-icon\"\r\n                }`}\r\n              />\r\n              <span className=\"align-middle d-inline-block\">{item.title}</span>\r\n            </NavLink>\r\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\r\n              {item.category}\r\n            </p>\r\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\r\n              {item.createDate}\r\n            </p>\r\n            <div className=\"w-15 w-xs-100\">\r\n              <Badge color={item.labelColor} pill>\r\n                {item.label}\r\n              </Badge>\r\n            </div>\r\n          </CardBody>\r\n          <div className=\"custom-control custom-checkbox pl-1 align-self-center mr-4\">\r\n            <CustomInput\r\n              className=\"itemCheck mb-0\"\r\n              type=\"checkbox\"\r\n              id={`check_${item.id}`}\r\n              checked={isSelected}\r\n              onChange={event => handleCheckChange(event, item.id)}\r\n              label=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\nexport default React.memo(SurveyListItem);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  CustomInput,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport CustomSelectInput from \"../../components/common/CustomSelectInput\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nimport { addSurveyItem } from \"../../redux/actions\";\r\n\r\nclass AddNewSurveyModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      label: {},\r\n      labelColor: \"\",\r\n      category: {},\r\n      status: \"PENDING\"\r\n    };\r\n  }\r\n\r\n  addNetItem = () => {\r\n    const newItem = {\r\n      title: this.state.title,\r\n      label: this.state.label.value,\r\n      labelColor: this.state.label.color,\r\n      category: this.state.category.value,\r\n      status: this.state.status\r\n    };\r\n    this.props.addSurveyItem(newItem);\r\n    this.props.toggleModal();\r\n    this.setState({\r\n      title: \"\",\r\n      label: {},\r\n      category: {},\r\n      status: \"ACTIVE\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { labels, categories } = this.props.surveyListApp;\r\n    const { modalOpen, toggleModal } = this.props;\r\n    return (\r\n      <Modal\r\n        isOpen={modalOpen}\r\n        toggle={toggleModal}\r\n        wrapClassName=\"modal-right\"\r\n        backdrop=\"static\"\r\n      >\r\n        <ModalHeader toggle={toggleModal}>\r\n          <IntlMessages id=\"survey.add-new-title\" />\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"survey.title\" />\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            defaultValue={this.state.title}\r\n            onChange={event => {\r\n              this.setState({ title: event.target.value });\r\n            }}\r\n          />\r\n\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"survey.category\" />\r\n          </Label>\r\n          <Select\r\n            components={{ Input: CustomSelectInput }}\r\n            className=\"react-select\"\r\n            classNamePrefix=\"react-select\"\r\n            name=\"form-field-name\"\r\n            options={categories.map((x, i) => {\r\n              return { label: x, value: x, key: i };\r\n            })}\r\n            value={this.state.category}\r\n            onChange={val => {\r\n              this.setState({ category: val });\r\n            }}\r\n          />\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"survey.label\" />\r\n          </Label>\r\n          <Select\r\n            components={{ Input: CustomSelectInput }}\r\n            className=\"react-select\"\r\n            classNamePrefix=\"react-select\"\r\n            name=\"form-field-name\"\r\n            options={labels.map((x, i) => {\r\n              return {\r\n                label: x.label,\r\n                value: x.label,\r\n                key: i,\r\n                color: x.color\r\n              };\r\n            })}\r\n            value={this.state.label}\r\n            onChange={val => {\r\n              this.setState({ label: val });\r\n            }}\r\n          />\r\n\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"survey.status\" />\r\n          </Label>\r\n          <CustomInput\r\n            type=\"radio\"\r\n            id=\"exCustomRadio\"\r\n            name=\"customRadio\"\r\n            label=\"COMPLETED\"\r\n            checked={this.state.status === \"COMPLETED\"}\r\n            onChange={event => {\r\n              this.setState({\r\n                status: event.target.value === \"on\" ? \"COMPLETED\" : \"ACTIVE\"\r\n              });\r\n            }}\r\n          />\r\n          <CustomInput\r\n            type=\"radio\"\r\n            id=\"exCustomRadio2\"\r\n            name=\"customRadio2\"\r\n            label=\"ACTIVE\"\r\n            checked={this.state.status === \"ACTIVE\"}\r\n            onChange={event => {\r\n              this.setState({\r\n                status: event.target.value !== \"on\" ? \"COMPLETED\" : \"ACTIVE\"\r\n              });\r\n            }}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" outline onClick={toggleModal}>\r\n            <IntlMessages id=\"survey.cancel\" />\r\n          </Button>\r\n          <Button color=\"primary\" onClick={() => this.addNetItem()}>\r\n            <IntlMessages id=\"survey.submit\" />\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ surveyListApp }) => {\r\n  return {\r\n    surveyListApp\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    addSurveyItem\r\n  }\r\n)(AddNewSurveyModal);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavItem, Badge } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport classnames from \"classnames\";\r\n\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport ApplicationMenu from \"../../components/common/ApplicationMenu\";\r\n\r\nimport { getSurveyListWithFilter } from \"../../redux/actions\";\r\nexport class SurveyApplicationMenu extends Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  addFilter(column, value) {\r\n    this.props.getSurveyListWithFilter(column, value);\r\n  }\r\n  render() {\r\n    const {\r\n      surveyItems,\r\n      filter,\r\n      allSurveyItems,\r\n      loading,\r\n      labels,\r\n      categories\r\n    } = this.props.surveyListApp;\r\n\r\n    return (\r\n      <ApplicationMenu>\r\n        <PerfectScrollbar\r\n          options={{ suppressScrollX: true, wheelPropagation: false }}\r\n        >\r\n          <div className=\"p-4\">\r\n            <p className=\"text-muted text-small\">\r\n              <IntlMessages id=\"survey.status\" />\r\n              Status\r\n            </p>\r\n            <ul className=\"list-unstyled mb-5\">\r\n              <NavItem className={classnames({ active: !filter })}>\r\n                <NavLink to=\"#\" onClick={e => this.addFilter(\"\", \"\")}>\r\n                  <i className=\"simple-icon-reload\" />\r\n                  <IntlMessages id=\"survey.all-surveys\" />\r\n                  <span className=\"float-right\">\r\n                    {loading && allSurveyItems.length}\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem\r\n                className={classnames({\r\n                  active:\r\n                    filter &&\r\n                    filter.column === \"status\" &&\r\n                    filter.value === \"ACTIVE\"\r\n                })}>\r\n                <NavLink\r\n                  to=\"#\"\r\n                  onClick={e => this.addFilter(\"status\", \"ACTIVE\")}>\r\n                  <i className=\"simple-icon-refresh\" />\r\n                  <IntlMessages id=\"survey.active-surveys\" />\r\n                  <span className=\"float-right\">\r\n                    {loading &&\r\n                      surveyItems.filter(x => x.status === \"ACTIVE\").length}\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem\r\n                className={classnames({\r\n                  active:\r\n                    filter &&\r\n                    filter.column === \"status\" &&\r\n                    filter.value === \"COMPLETED\"\r\n                })}>\r\n                <NavLink\r\n                  to=\"#\"\r\n                  onClick={e => this.addFilter(\"status\", \"COMPLETED\")}>\r\n                  <i className=\"simple-icon-check\" />\r\n                  <IntlMessages id=\"survey.completed-surveys\" />\r\n                  <span className=\"float-right\">\r\n                    {loading &&\r\n                      surveyItems.filter(x => x.status === \"COMPLETED\").length}\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </ul>\r\n            <p className=\"text-muted text-small\">\r\n              <IntlMessages id=\"survey.categories\" />\r\n            </p>\r\n            <ul className=\"list-unstyled mb-5\">\r\n              {categories.map((c, index) => {\r\n                return (\r\n                  <NavItem key={index}>\r\n                    <div onClick={e => this.addFilter(\"category\", c)}>\r\n                      <div className=\"custom-control custom-radio\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          className=\"custom-control-input\"\r\n                          defaultChecked={\r\n                            filter &&\r\n                            filter.column === \"category\" &&\r\n                            filter.value === c\r\n                          }\r\n                        />\r\n                        <label className=\"custom-control-label\">{c}</label>\r\n                      </div>\r\n                    </div>\r\n                  </NavItem>\r\n                );\r\n              })}\r\n            </ul>\r\n            <p className=\"text-muted text-small\">\r\n              <IntlMessages id=\"survey.labels\" />\r\n            </p>\r\n            <div>\r\n              {labels.map((l, index) => {\r\n                return (\r\n                  <p className=\"d-sm-inline-block mb-1\" key={index}>\r\n                    <NavLink\r\n                      to=\"#\"\r\n                      onClick={e => this.addFilter(\"label\", l.label)}\r\n                    >\r\n                      <Badge\r\n                        className=\"mb-1\"\r\n                        color={`${\r\n                          filter &&\r\n                          filter.column === \"label\" &&\r\n                          filter.value === l.label\r\n                            ? l.color\r\n                            : \"outline-\" + l.color\r\n                        }`}\r\n                        pill\r\n                      >\r\n                        {l.label}\r\n                      </Badge>\r\n                    </NavLink>\r\n                  </p>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </PerfectScrollbar>\r\n      </ApplicationMenu>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({ surveyListApp }) => {\r\n  return {\r\n    surveyListApp\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    getSurveyListWithFilter\r\n  }\r\n)(SurveyApplicationMenu);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport {\r\n  Row,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  Collapse,\r\n  ButtonDropdown,\r\n  CustomInput\r\n} from \"reactstrap\";\r\n\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\n\r\nimport {\r\n  getSurveyList,\r\n  getSurveyListWithOrder,\r\n  getSurveyListSearch,\r\n  selectedSurveyItemsChange\r\n} from \"../../../redux/actions\";\r\n\r\nimport SurveyListItem from \"../../../components/applications/SurveyListItem\";\r\nimport AddNewSurveyModal from \"../../../containers/applications/AddNewSurveyModal\";\r\nimport SurveyApplicationMenu from \"../../../containers/applications/SurveyApplicationMenu\";\r\n\r\nclass SurveyApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dropdownSplitOpen: false,\r\n      modalOpen: false,\r\n      lastChecked: null,\r\n\r\n      title: \"\",\r\n      label: {},\r\n      category: {},\r\n      status: \"ACTIVE\",\r\n      displayOptionsIsOpen: false\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.props.getSurveyList();\r\n  }\r\n\r\n  toggleDisplayOptions = () => {\r\n    this.setState({ displayOptionsIsOpen: !this.state.displayOptionsIsOpen });\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modalOpen: !this.state.modalOpen\r\n    });\r\n  };\r\n\r\n  toggleSplit = () => {\r\n    this.setState(prevState => ({\r\n      dropdownSplitOpen: !prevState.dropdownSplitOpen\r\n    }));\r\n  };\r\n\r\n  changeOrderBy = column => {\r\n    this.props.getSurveyListWithOrder(column);\r\n  };\r\n\r\n  handleKeyPress = e => {\r\n    if (e.key === \"Enter\") {\r\n      this.props.getSurveyListSearch(e.target.value);\r\n    }\r\n  };\r\n\r\n  handleCheckChange = (event, id) => {\r\n    if (this.state.lastChecked == null) {\r\n      this.setState({\r\n        lastChecked: id\r\n      });\r\n    }\r\n\r\n    let selectedItems = Object.assign(\r\n      [],\r\n      this.props.surveyListApp.selectedItems\r\n    );\r\n    if (selectedItems.includes(id)) {\r\n      selectedItems = selectedItems.filter(x => x !== id);\r\n    } else {\r\n      selectedItems.push(id);\r\n    }\r\n    this.props.selectedSurveyItemsChange(selectedItems);\r\n\r\n    if (event.shiftKey) {\r\n      var items = this.props.surveyListApp.surveyItems;\r\n      var start = this.getIndex(id, items, \"id\");\r\n      var end = this.getIndex(this.state.lastChecked, items, \"id\");\r\n      items = items.slice(Math.min(start, end), Math.max(start, end) + 1);\r\n      selectedItems.push(\r\n        ...items.map(item => {\r\n          return item.id;\r\n        })\r\n      );\r\n      selectedItems = Array.from(new Set(selectedItems));\r\n      this.props.selectedSurveyItemsChange(selectedItems);\r\n    }\r\n    return;\r\n  };\r\n  handleChangeSelectAll = () => {\r\n    if (this.props.surveyListApp.loading) {\r\n      if (\r\n        this.props.surveyListApp.selectedItems.length >=\r\n        this.props.surveyListApp.surveyItems.length\r\n      ) {\r\n        this.props.selectedSurveyItemsChange([]);\r\n      } else {\r\n        this.props.selectedSurveyItemsChange(\r\n          this.props.surveyListApp.surveyItems.map(x => x.id)\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  getIndex(value, arr, prop) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i][prop] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  render() {\r\n    const {\r\n      surveyItems,\r\n      searchKeyword,\r\n      loading,\r\n      orderColumn,\r\n      orderColumns,\r\n      selectedItems\r\n    } = this.props.surveyListApp;\r\n    const { messages } = this.props.intl;\r\n    const { modalOpen } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <Row className=\"app-row survey-app\">\r\n          <Colxx xxs=\"12\">\r\n            <div className=\"mb-2\">\r\n              <h1>\r\n                <IntlMessages id=\"menu.survey\" />\r\n              </h1>\r\n\r\n              {loading && (\r\n                <div className=\"text-zero top-right-button-container\">\r\n                  <Button\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    className=\"top-right-button mr-1\"\r\n                    onClick={this.toggleModal}\r\n                  >\r\n                    <IntlMessages id=\"survey.add-new\" />\r\n                  </Button>\r\n                  <ButtonDropdown\r\n                    isOpen={this.state.dropdownSplitOpen}\r\n                    toggle={this.toggleSplit}\r\n                  >\r\n                    <div className=\"btn btn-primary btn-lg pl-4 pr-0 check-button check-all\">\r\n                      <CustomInput\r\n                        className=\"custom-checkbox mb-0 d-inline-block\"\r\n                        type=\"checkbox\"\r\n                        id=\"checkAll\"\r\n                        checked={selectedItems.length >= surveyItems.length}\r\n                        onClick={() => this.handleChangeSelectAll()}\r\n                        onChange={() => this.handleChangeSelectAll()}\r\n                        label={\r\n                          <span\r\n                            className={`custom-control-label ${\r\n                              selectedItems.length > 0 &&\r\n                              selectedItems.length < surveyItems.length\r\n                                ? \"indeterminate\"\r\n                                : \"\"\r\n                            }`}\r\n                          />\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <DropdownToggle\r\n                      caret\r\n                      color=\"primary\"\r\n                      className=\"dropdown-toggle-split btn-lg\"\r\n                    />\r\n                    <DropdownMenu right>\r\n                      <DropdownItem>\r\n                        <IntlMessages id=\"survey.delete\" />\r\n                      </DropdownItem>\r\n                      <DropdownItem>\r\n                        <IntlMessages id=\"survey.another-action\" />\r\n                      </DropdownItem>\r\n                    </DropdownMenu>\r\n                  </ButtonDropdown>\r\n                </div>\r\n              )}\r\n\r\n              <Breadcrumb match={this.props.match} />\r\n            </div>\r\n\r\n            <div className=\"mb-2\">\r\n              <Button\r\n                color=\"empty\"\r\n                className=\"pt-0 pl-0 d-inline-block d-md-none\"\r\n                onClick={this.toggleDisplayOptions}>\r\n                <IntlMessages id=\"survey.display-options\" />{\" \"}\r\n                <i className=\"simple-icon-arrow-down align-middle\" />\r\n              </Button>\r\n\r\n              <Collapse\r\n                id=\"displayOptions\"\r\n                className=\"d-md-block mb-2\"\r\n                isOpen={this.state.displayOptionsIsOpen}>\r\n                <div className=\"d-block d-md-inline-block\">\r\n                  <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                    <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                      <IntlMessages id=\"survey.orderby\" />\r\n                      {orderColumn ? orderColumn.label : \"\"}\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                      {orderColumns.map((o, index) => {\r\n                        return (\r\n                          <DropdownItem\r\n                            key={index}\r\n                            onClick={() => this.changeOrderBy(o.column)}\r\n                          >\r\n                            {o.label}\r\n                          </DropdownItem>\r\n                        );\r\n                      })}\r\n                    </DropdownMenu>\r\n                  </UncontrolledDropdown>\r\n                  <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"keyword\"\r\n                      id=\"search\"\r\n                      placeholder={messages[\"menu.search\"]}\r\n                      defaultValue={searchKeyword}\r\n                      onKeyPress={e => this.handleKeyPress(e)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Collapse>\r\n            </div>\r\n            <Separator className=\"mb-5\" />\r\n            <Row>\r\n              {loading ? (\r\n                surveyItems.map((item, index) => {\r\n                  return (\r\n                    <SurveyListItem\r\n                      key={`todo_item_${index}`}\r\n                      item={item}\r\n                      handleCheckChange={this.handleCheckChange}\r\n                      isSelected={\r\n                        loading ? selectedItems.includes(item.id) : false\r\n                      }\r\n                    />\r\n                  );\r\n                })\r\n              ) : (\r\n                <div className=\"loading\" />\r\n              )}\r\n            </Row>\r\n          </Colxx>\r\n        </Row>\r\n\r\n        {loading && <SurveyApplicationMenu />}\r\n        <AddNewSurveyModal\r\n          toggleModal={this.toggleModal}\r\n          modalOpen={modalOpen}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({ surveyListApp }) => {\r\n  return {\r\n    surveyListApp\r\n  };\r\n};\r\nexport default injectIntl(\r\n  connect(\r\n    mapStateToProps,\r\n    {\r\n      getSurveyList,\r\n      getSurveyListWithOrder,\r\n      getSurveyListSearch,\r\n      selectedSurveyItemsChange\r\n    }\r\n  )(SurveyApp)\r\n);\r\n","import React from \"react\";\r\nimport { components } from \"react-select\";\r\n\r\nconst CustomSelectInput = props => {\r\n  var customProps = Object.assign({}, props);\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { NavLink } from \"reactstrap\";\r\nexport default class ApplicationMenu extends React.Component {\r\n  constructor(...params) {\r\n    super(...params);\r\n    this.handleDocumentClick = this.handleDocumentClick.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  handleDocumentClick(e) {\r\n    const container = ReactDOM.findDOMNode(this);\r\n    if (container.contains(e.target) || container === e.target) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(e);\r\n  }\r\n\r\n  toggle(e) {\r\n    e.preventDefault();\r\n    const isOpen = this.state.isOpen;\r\n    if (!isOpen) {\r\n      this.addEvents();\r\n    } else {\r\n      this.removeEvents();\r\n    }\r\n    this.setState({\r\n      isOpen: !isOpen\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeEvents();\r\n  }\r\n\r\n  addEvents() {\r\n    [\"click\", \"touchstart\"].forEach(event =>\r\n      document.addEventListener(event, this.handleDocumentClick, true)\r\n    );\r\n  }\r\n\r\n  removeEvents() {\r\n    [\"click\", \"touchstart\"].forEach(event =>\r\n      document.removeEventListener(event, this.handleDocumentClick, true)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`app-menu ${this.state.isOpen ? \"shown\" : \"\"}`}>\r\n        {this.props.children}\r\n\r\n        <NavLink\r\n          className=\"app-menu-button d-inline-block d-xl-none\"\r\n          onClick={this.toggle}\r\n        >\r\n          <i className=\"simple-icon-options\" />\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}