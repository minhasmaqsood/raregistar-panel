{"version":3,"sources":["views/app/result/create.js","../node_modules/reactstrap/es/Form.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/reactstrap/es/Label.js"],"names":["initialState","rows","heading","subTitle","total","loading","CreateResult","props","createResult","e","a","preventDefault","state","setState","ApiCall","Url","RESULT_STORE","details","sub_heading","config","post","status","history","push","NotificationManager","success","handleInputChange","target","name","value","handleRowsAttributeChange","event","index","position","removeRowClick","splice","addRowsInput","prevState","AddResultList","map","el","key","xs","sm","type","onChange","placeholder","required","className","color","size","onClick","this","xxs","to","id","match","onSubmit","row","disabled","Component","propTypes","children","PropTypes","node","inline","bool","tag","tagPropType","innerRef","oneOfType","object","func","string","cssModule","Form","_Component","_this","call","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","prototype","ref","render","_this$props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","stringOrNumberProp","number","columnProps","shape","order","offset","hidden","check","for","md","lg","xl","widths","array","getColumnSizeClass","isXs","colWidth","colSize","Label","htmlFor","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","length"],"mappings":"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","file":"static/js/108.9e9723ec.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardTitle,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    Form,\r\n    Input\r\n} from \"reactstrap\";\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\nimport ApiCall from '../../../config/network';\r\nimport Url from '../../../config/api';\r\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\r\nimport {config} from \"../../../config/env\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst initialState = {\r\n    rows: [],\r\n    heading: '',\r\n    subTitle: '',\r\n    total: '',\r\n    loading: false\r\n}\r\nexport default class CreateResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = initialState;\r\n    };\r\n\r\n    createResult = async (e)=> {\r\n        e.preventDefault();\r\n        const { rows, heading, subTitle, total } = this.state;\r\n        this.setState({loading: true});\r\n        let response = await ApiCall.post(Url.RESULT_STORE, {\r\n            details: rows,\r\n            heading: heading,\r\n            sub_heading: subTitle,\r\n            total: total,\r\n        }, await config());\r\n        if(response.status === 200){\r\n            this.setState(initialState);\r\n            this.props.history.push('/app/results/view')\r\n            return  NotificationManager.success(\r\n                \"Result Stored Successfully\",\r\n                \"Success\",\r\n                3000,\r\n                null,\r\n                null,\r\n                'filled'\r\n            );\r\n        }else {\r\n            this.setState({loading: false});\r\n        }\r\n    };\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    // handleAttributeChange = (e) => {\r\n    //     this.setState({\r\n    //         isActive: e.target.checked\r\n    //     })\r\n    // };\r\n\r\n    handleRowsAttributeChange = (event, index) => {\r\n        if(event.target.name === 'position'){\r\n            let rows = this.state.rows;\r\n            rows[index].position = event.target.value;\r\n            this.setState({ rows })\r\n        }\r\n        // if(event.target.name === 'action'){\r\n        //     let rows = this.state.rows;\r\n        //     rows[index].action = event.target.value;\r\n        //     this.setState({ rows })\r\n        // }\r\n        // if(event.target.name === \"isActive\"){\r\n        //     let rows = this.state.rows;\r\n        //     rows[index].isActive = event.target.checked;\r\n        //     this.setState({ rows })\r\n        // }\r\n    };\r\n\r\n    removeRowClick =(index) => {\r\n        let rows = [...this.state.rows];\r\n        rows.splice(index, 1);\r\n        this.setState({rows});\r\n    };\r\n\r\n    addRowsInput =() => {\r\n        let rows = {'position':'',\r\n            // 'action': '', 'isActive': true\r\n        };\r\n        this.setState(prevState => ({rows: [...prevState.rows, rows]}));\r\n    };\r\n\r\n    AddResultList = () => {\r\n        return this.state.rows.map((el, index) => (\r\n            <div key={index}>\r\n                <Row>\r\n                    <Col xs='10'>\r\n                        <FormGroup>\r\n                            <Colxx sm=\"12\">\r\n                                <Input type=\"text\" value={this.state.rows[index].position} onChange={(e) => this.handleRowsAttributeChange(e, index)} name=\"position\" placeholder={'Position *'} required/>\r\n                            </Colxx>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"form-group\">\r\n                            <Button\r\n                                color='danger'\r\n                                size={'sm'}\r\n                                onClick={() => {\r\n                                    this.removeRowClick(index);\r\n                                }}\r\n                            >\r\n                                Remove\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n                {/*<hr />*/}\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    render() {\r\n        const {heading, subTitle, total} = this.state;\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n                        <div className=\"text-zero top-right-button-container\">\r\n                            <Link to='/app/results/view'><Button size='lg' color={'secondary'}><IntlMessages id={\"menu.cancel\"} /></Button></Link>\r\n                        </div>\r\n                        <Breadcrumb heading=\"menu.create\" match={this.props.match} />\r\n                        <Separator className=\"mb-5\" />\r\n                    </Colxx>\r\n                </Row>\r\n                <Row>\r\n                    <Col xxs=\"10\">\r\n                        <div className='col-sm-12 col-lg-10 col-xs-12 '>\r\n                            <Card>\r\n                                <div className=\"position-absolute card-top-buttons\">\r\n                                </div>\r\n                                <CardBody>\r\n                                    <CardTitle>\r\n                                        <IntlMessages id=\"createResult\" />\r\n                                    </CardTitle>\r\n                                    <Form className=\"dashboard-quick-post\" onSubmit={this.createResult}>\r\n                                        <FormGroup row>\r\n                                            <Label sm=\"3\">\r\n                                                <IntlMessages id=\"heading\" />*\r\n                                            </Label>\r\n                                            <Colxx sm=\"9\">\r\n                                                <Input type=\"text\" value={heading} onChange={this.handleInputChange} name=\"heading\" placeholder={'Heading *'} required/>\r\n                                            </Colxx>\r\n                                        </FormGroup>\r\n                                        <FormGroup row>\r\n                                            <Label sm=\"3\">\r\n                                                <IntlMessages id=\"subtitle\" />*\r\n                                            </Label>\r\n                                            <Colxx sm=\"9\">\r\n                                                <Input type=\"text\" value={subTitle} onChange={this.handleInputChange} name=\"subTitle\" placeholder={'Sub Title *'} required/>\r\n                                            </Colxx>\r\n                                        </FormGroup>\r\n                                        <FormGroup row>\r\n                                            <Label  sm=\"3\">\r\n                                                <IntlMessages id=\"rows\" />*\r\n                                            </Label>\r\n                                            <Colxx sm=\"9\">\r\n                                                {this.AddResultList()}\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    className=\"btn btn-primary\"\r\n                                                    onClick={() => this.addRowsInput()}\r\n                                                >\r\n                                                    <IntlMessages id=\"addNew\"/>\r\n                                                </button>\r\n                                            </Colxx>\r\n                                        </FormGroup>\r\n                                        <FormGroup row>\r\n                                            <Label sm=\"3\">\r\n                                                <IntlMessages id=\"total\" />*\r\n                                            </Label>\r\n                                            <Colxx sm=\"9\">\r\n                                                <Input type=\"text\" value={total} onChange={this.handleInputChange} name=\"total\" placeholder={'Total *'} required/>\r\n                                            </Colxx>\r\n                                        </FormGroup>\r\n                                        <Button className={`float-right btn-shadow btn-multiple-state ${this.state.loading ? \"show-spinner\" : \"\"}`} color=\"primary\" disabled={this.state.loading}>\r\n                                        <span className=\"spinner d-inline-block\">\r\n                          <span className=\"bounce1\" />\r\n                          <span className=\"bounce2\" />\r\n                          <span className=\"bounce3\" />\r\n                        </span>\r\n                                            <span className=\"label\"><IntlMessages id=\"create\" /></span>\r\n                                        </Button>\r\n                                    </Form>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;"],"sourceRoot":""}